
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

using System;
using org.bn.attributes;
using org.bn.attributes.constraints;
using org.bn.coders;
using org.bn.types;
using org.bn;

namespace MMS_ASN1_Model {


    [ASN1PreparedElement]
    [ASN1Sequence ( Name = "CS_GetEventConditionAttributes_Response", IsSet = false  )]
    public class CS_GetEventConditionAttributes_Response : IASN1PreparedElement {
                    
	private GroupPriorityOverrideChoiceType groupPriorityOverride_ ;
	
        private bool  groupPriorityOverride_present = false ;
	

    [ASN1PreparedElement]    
    [ASN1Choice ( Name = "groupPriorityOverride" )]
    public class GroupPriorityOverrideChoiceType : IASN1PreparedElement  {
	            
        
	private Priority priority_ ;
        private bool  priority_selected = false ;
        
                
        
        [ASN1Element ( Name = "priority", IsOptional =  false , HasTag =  true, Tag = 0 , HasDefaultValue =  false )  ]
    
        public Priority Priority
        {
            get { return priority_; }
            set { selectPriority(value); }
        }
        
                
          
        
	private NullObject undefined_ ;
        private bool  undefined_selected = false ;
        
                
        
        [ASN1Null ( Name = "undefined" )]
    
        [ASN1Element ( Name = "undefined", IsOptional =  false , HasTag =  true, Tag = 1 , HasDefaultValue =  false )  ]
    
        public NullObject Undefined
        {
            get { return undefined_; }
            set { selectUndefined(value); }
        }
        
                
          
        public bool isPrioritySelected () {
            return this.priority_selected ;
        }

        


        public void selectPriority (Priority val) {
            this.priority_ = val;
            this.priority_selected = true;
            
            
                    this.undefined_selected = false;
                            
        }
        
          
        public bool isUndefinedSelected () {
            return this.undefined_selected ;
        }

        
        public void selectUndefined () {
            selectUndefined (new NullObject());
	}
	


        public void selectUndefined (NullObject val) {
            this.undefined_ = val;
            this.undefined_selected = true;
            
            
                    this.priority_selected = false;
                            
        }
        
  

            public void initWithDefaults()
	    {
	    }

            private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(GroupPriorityOverrideChoiceType));
            public IASN1PreparedElementData PreparedData {
            	get { return preparedData; }
            }

    }
                
        [ASN1Element ( Name = "groupPriorityOverride", IsOptional =  true , HasTag =  true, Tag = 0 , HasDefaultValue =  false )  ]
    
        public GroupPriorityOverrideChoiceType GroupPriorityOverride
        {
            get { return groupPriorityOverride_; }
            set { groupPriorityOverride_ = value; groupPriorityOverride_present = true;  }
        }
        
                
          
	private System.Collections.Generic.ICollection<ObjectName> listOfReferencingECL_ ;
	
        private bool  listOfReferencingECL_present = false ;
	
[ASN1SequenceOf( Name = "listOfReferencingECL", IsSetOf = false  )]

    
        [ASN1Element ( Name = "listOfReferencingECL", IsOptional =  true , HasTag =  true, Tag = 1 , HasDefaultValue =  false )  ]
    
        public System.Collections.Generic.ICollection<ObjectName> ListOfReferencingECL
        {
            get { return listOfReferencingECL_; }
            set { listOfReferencingECL_ = value; listOfReferencingECL_present = true;  }
        }
        
                
          
	private DisplayEnhancementChoiceType displayEnhancement_ ;
	

    [ASN1PreparedElement]    
    [ASN1Choice ( Name = "displayEnhancement" )]
    public class DisplayEnhancementChoiceType : IASN1PreparedElement  {
	            
        
	private string string_ ;
        private bool  string_selected = false ;
        
                
        [ASN1String( Name = "", 
        StringType =  UniversalTags.VisibleString , IsUCS = false )]
        [ASN1Element ( Name = "string", IsOptional =  false , HasTag =  true, Tag = 0 , HasDefaultValue =  false )  ]
    
        public string String
        {
            get { return string_; }
            set { selectString(value); }
        }
        
                
          
        
	private long index_ ;
        private bool  index_selected = false ;
        
                
        [ASN1Integer( Name = "" )]
    
        [ASN1Element ( Name = "index", IsOptional =  false , HasTag =  true, Tag = 1 , HasDefaultValue =  false )  ]
    
        public long Index
        {
            get { return index_; }
            set { selectIndex(value); }
        }
        
                
          
        
	private NullObject noEnhancement_ ;
        private bool  noEnhancement_selected = false ;
        
                
        
        [ASN1Null ( Name = "noEnhancement" )]
    
        [ASN1Element ( Name = "noEnhancement", IsOptional =  false , HasTag =  true, Tag = 2 , HasDefaultValue =  false )  ]
    
        public NullObject NoEnhancement
        {
            get { return noEnhancement_; }
            set { selectNoEnhancement(value); }
        }
        
                
          
        public bool isStringSelected () {
            return this.string_selected ;
        }

        


        public void selectString (string val) {
            this.string_ = val;
            this.string_selected = true;
            
            
                    this.index_selected = false;
                
                    this.noEnhancement_selected = false;
                            
        }
        
          
        public bool isIndexSelected () {
            return this.index_selected ;
        }

        


        public void selectIndex (long val) {
            this.index_ = val;
            this.index_selected = true;
            
            
                    this.string_selected = false;
                
                    this.noEnhancement_selected = false;
                            
        }
        
          
        public bool isNoEnhancementSelected () {
            return this.noEnhancement_selected ;
        }

        
        public void selectNoEnhancement () {
            selectNoEnhancement (new NullObject());
	}
	


        public void selectNoEnhancement (NullObject val) {
            this.noEnhancement_ = val;
            this.noEnhancement_selected = true;
            
            
                    this.string_selected = false;
                
                    this.index_selected = false;
                            
        }
        
  

            public void initWithDefaults()
	    {
	    }

            private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(DisplayEnhancementChoiceType));
            public IASN1PreparedElementData PreparedData {
            	get { return preparedData; }
            }

    }
                
        [ASN1Element ( Name = "displayEnhancement", IsOptional =  false , HasTag =  true, Tag = 2 , HasDefaultValue =  false )  ]
    
        public DisplayEnhancementChoiceType DisplayEnhancement
        {
            get { return displayEnhancement_; }
            set { displayEnhancement_ = value;  }
        }
        
                
  
        public bool isGroupPriorityOverridePresent () {
            return this.groupPriorityOverride_present == true;
        }
        
        public bool isListOfReferencingECLPresent () {
            return this.listOfReferencingECL_present == true;
        }
        

            public void initWithDefaults() {
            	
            }


            private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(CS_GetEventConditionAttributes_Response));
            public IASN1PreparedElementData PreparedData {
            	get { return preparedData; }
            }

            
    }
            
}
