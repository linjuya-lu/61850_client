
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

using System;
using org.bn.attributes;
using org.bn.attributes.constraints;
using org.bn.coders;
using org.bn.types;
using org.bn;

namespace MMS_ASN1_Model {


    [ASN1PreparedElement]
    [ASN1Sequence ( Name = "ReportPoolSemaphoreStatus_Response", IsSet = false  )]
    public class ReportPoolSemaphoreStatus_Response : IASN1PreparedElement {
                    
	private System.Collections.Generic.ICollection<ListOfNamedTokensChoiceType> listOfNamedTokens_ ;
	

    [ASN1PreparedElement]    
    [ASN1Choice ( Name = "listOfNamedTokens" )]
    public class ListOfNamedTokensChoiceType : IASN1PreparedElement  {
	            
        
	private Identifier freeNamedToken_ ;
        private bool  freeNamedToken_selected = false ;
        
                
        
        [ASN1Element ( Name = "freeNamedToken", IsOptional =  false , HasTag =  true, Tag = 0 , HasDefaultValue =  false )  ]
    
        public Identifier FreeNamedToken
        {
            get { return freeNamedToken_; }
            set { selectFreeNamedToken(value); }
        }
        
                
          
        
	private Identifier ownedNamedToken_ ;
        private bool  ownedNamedToken_selected = false ;
        
                
        
        [ASN1Element ( Name = "ownedNamedToken", IsOptional =  false , HasTag =  true, Tag = 1 , HasDefaultValue =  false )  ]
    
        public Identifier OwnedNamedToken
        {
            get { return ownedNamedToken_; }
            set { selectOwnedNamedToken(value); }
        }
        
                
          
        
	private Identifier hungNamedToken_ ;
        private bool  hungNamedToken_selected = false ;
        
                
        
        [ASN1Element ( Name = "hungNamedToken", IsOptional =  false , HasTag =  true, Tag = 2 , HasDefaultValue =  false )  ]
    
        public Identifier HungNamedToken
        {
            get { return hungNamedToken_; }
            set { selectHungNamedToken(value); }
        }
        
                
          
        public bool isFreeNamedTokenSelected () {
            return this.freeNamedToken_selected ;
        }

        


        public void selectFreeNamedToken (Identifier val) {
            this.freeNamedToken_ = val;
            this.freeNamedToken_selected = true;
            
            
                    this.ownedNamedToken_selected = false;
                
                    this.hungNamedToken_selected = false;
                            
        }
        
          
        public bool isOwnedNamedTokenSelected () {
            return this.ownedNamedToken_selected ;
        }

        


        public void selectOwnedNamedToken (Identifier val) {
            this.ownedNamedToken_ = val;
            this.ownedNamedToken_selected = true;
            
            
                    this.freeNamedToken_selected = false;
                
                    this.hungNamedToken_selected = false;
                            
        }
        
          
        public bool isHungNamedTokenSelected () {
            return this.hungNamedToken_selected ;
        }

        


        public void selectHungNamedToken (Identifier val) {
            this.hungNamedToken_ = val;
            this.hungNamedToken_selected = true;
            
            
                    this.freeNamedToken_selected = false;
                
                    this.ownedNamedToken_selected = false;
                            
        }
        
  

            public void initWithDefaults()
	    {
	    }

            private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(ListOfNamedTokensChoiceType));
            public IASN1PreparedElementData PreparedData {
            	get { return preparedData; }
            }

    }
                
[ASN1SequenceOf( Name = "listOfNamedTokens", IsSetOf = false  )]

    
        [ASN1Element ( Name = "listOfNamedTokens", IsOptional =  false , HasTag =  true, Tag = 0 , HasDefaultValue =  false )  ]
    
        public System.Collections.Generic.ICollection<ListOfNamedTokensChoiceType> ListOfNamedTokens
        {
            get { return listOfNamedTokens_; }
            set { listOfNamedTokens_ = value;  }
        }
        
                
          
	private bool moreFollows_ ;
	[ASN1Boolean( Name = "" )]
    
        [ASN1Element ( Name = "moreFollows", IsOptional =  false , HasTag =  true, Tag = 1 , HasDefaultValue =  true )  ]
    
        public bool MoreFollows
        {
            get { return moreFollows_; }
            set { moreFollows_ = value;  }
        }
        
                
  

            public void initWithDefaults() {
            	bool param_MoreFollows =
            false;
        MoreFollows = param_MoreFollows;
    
            }


            private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(ReportPoolSemaphoreStatus_Response));
            public IASN1PreparedElementData PreparedData {
            	get { return preparedData; }
            }

            
    }
            
}
