
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

using System;
using org.bn.attributes;
using org.bn.attributes.constraints;
using org.bn.coders;
using org.bn.types;
using org.bn;

namespace MMS_ASN1_Model {


    [ASN1PreparedElement]
    [ASN1Sequence ( Name = "Journal_Entry_instance", IsSet = false  )]
    public class Journal_Entry_instance : IASN1PreparedElement {
                    
	private Journal_instance journal_ ;
	
        [ASN1Element ( Name = "journal", IsOptional =  false , HasTag =  true, Tag = 0 , HasDefaultValue =  false )  ]
    
        public Journal_instance Journal
        {
            get { return journal_; }
            set { journal_ = value;  }
        }
        
                
          
	private byte[] entry_ ;
	[ASN1OctetString( Name = "" )]
    
        [ASN1Element ( Name = "entry", IsOptional =  false , HasTag =  true, Tag = 1 , HasDefaultValue =  false )  ]
    
        public byte[] Entry
        {
            get { return entry_; }
            set { entry_ = value;  }
        }
        
                
          
	private ApplicationReference clientApplication_ ;
	
        [ASN1Element ( Name = "clientApplication", IsOptional =  false , HasTag =  true, Tag = 2 , HasDefaultValue =  false )  ]
    
        public ApplicationReference ClientApplication
        {
            get { return clientApplication_; }
            set { clientApplication_ = value;  }
        }
        
                
          
	private TimeOfDay timeStamp_ ;
	
        [ASN1Element ( Name = "timeStamp", IsOptional =  false , HasTag =  true, Tag = 3 , HasDefaultValue =  false )  ]
    
        public TimeOfDay TimeStamp
        {
            get { return timeStamp_; }
            set { timeStamp_ = value;  }
        }
        
                
          
	private long orderOfReceipt_ ;
	[ASN1Integer( Name = "" )]
    
        [ASN1Element ( Name = "orderOfReceipt", IsOptional =  false , HasTag =  true, Tag = 4 , HasDefaultValue =  false )  ]
    
        public long OrderOfReceipt
        {
            get { return orderOfReceipt_; }
            set { orderOfReceipt_ = value;  }
        }
        
                
          
	private InformationTypeEnumType informationType_ ;
	


    [ASN1PreparedElement]
    [ASN1Enum ( Name = "InformationTypeEnumType")]
    public class InformationTypeEnumType : IASN1PreparedElement {        
        public enum EnumType {
            
            [ASN1EnumItem ( Name = "annotation", HasTag = true , Tag = 0 )]
            annotation , 
            [ASN1EnumItem ( Name = "event-data", HasTag = true , Tag = 1 )]
            event_data , 
            [ASN1EnumItem ( Name = "data", HasTag = true , Tag = 2 )]
            data , 
        }
        
        private EnumType val;
        
        public EnumType Value
        {
            get { return val; }
            set { val = value; }
        }        

            public void initWithDefaults()
	    {
	    }


            private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(InformationTypeEnumType));
            public IASN1PreparedElementData PreparedData {
            	get { return preparedData; }
            }

                
    }

                
        [ASN1Element ( Name = "informationType", IsOptional =  false , HasTag =  true, Tag = 5 , HasDefaultValue =  false )  ]
    
        public InformationTypeEnumType InformationType
        {
            get { return informationType_; }
            set { informationType_ = value;  }
        }
        
                
          
	private MMS255String textComment_ ;
	
        private bool  textComment_present = false ;
	
        [ASN1Element ( Name = "textComment", IsOptional =  true , HasTag =  true, Tag = 6 , HasDefaultValue =  false )  ]
    
        public MMS255String TextComment
        {
            get { return textComment_; }
            set { textComment_ = value; textComment_present = true;  }
        }
        
                
          
	private EventTransitionRecordSequenceType eventTransitionRecord_ ;
	
        private bool  eventTransitionRecord_present = false ;
	
       [ASN1PreparedElement]
       [ASN1Sequence ( Name = "eventTransitionRecord", IsSet = false  )]
       public class EventTransitionRecordSequenceType : IASN1PreparedElement {
                        
	private ObjectName name_ ;
	
        [ASN1Element ( Name = "name", IsOptional =  false , HasTag =  true, Tag = 8 , HasDefaultValue =  false )  ]
    
        public ObjectName Name
        {
            get { return name_; }
            set { name_ = value;  }
        }
        
                
          
	private EC_State currentState_ ;
	
        [ASN1Element ( Name = "currentState", IsOptional =  false , HasTag =  true, Tag = 9 , HasDefaultValue =  false )  ]
    
        public EC_State CurrentState
        {
            get { return currentState_; }
            set { currentState_ = value;  }
        }
        
                
  
                
                public void initWithDefaults() {
            		
                }

            private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(EventTransitionRecordSequenceType));
            public IASN1PreparedElementData PreparedData {
            	get { return preparedData; }
            }

                
       }
                
        [ASN1Element ( Name = "eventTransitionRecord", IsOptional =  true , HasTag =  true, Tag = 7 , HasDefaultValue =  false )  ]
    
        public EventTransitionRecordSequenceType EventTransitionRecord
        {
            get { return eventTransitionRecord_; }
            set { eventTransitionRecord_ = value; eventTransitionRecord_present = true;  }
        }
        
                
          
	private System.Collections.Generic.ICollection<JournalVariablesSequenceType> journalVariables_ ;
	
        private bool  journalVariables_present = false ;
	
       [ASN1PreparedElement]
       [ASN1Sequence ( Name = "journalVariables", IsSet = false  )]
       public class JournalVariablesSequenceType : IASN1PreparedElement {
                        
	private MMS255String variableTag_ ;
	
        [ASN1Element ( Name = "variableTag", IsOptional =  false , HasTag =  true, Tag = 11 , HasDefaultValue =  false )  ]
    
        public MMS255String VariableTag
        {
            get { return variableTag_; }
            set { variableTag_ = value;  }
        }
        
                
          
	private Data valueSpecification_ ;
	
        [ASN1Element ( Name = "valueSpecification", IsOptional =  false , HasTag =  true, Tag = 12 , HasDefaultValue =  false )  ]
    
        public Data ValueSpecification
        {
            get { return valueSpecification_; }
            set { valueSpecification_ = value;  }
        }
        
                
  
                
                public void initWithDefaults() {
            		
                }

            private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(JournalVariablesSequenceType));
            public IASN1PreparedElementData PreparedData {
            	get { return preparedData; }
            }

                
       }
                
[ASN1SequenceOf( Name = "journalVariables", IsSetOf = false  )]

    
        [ASN1Element ( Name = "journalVariables", IsOptional =  true , HasTag =  true, Tag = 10 , HasDefaultValue =  false )  ]
    
        public System.Collections.Generic.ICollection<JournalVariablesSequenceType> JournalVariables
        {
            get { return journalVariables_; }
            set { journalVariables_ = value; journalVariables_present = true;  }
        }
        
                
  
        public bool isTextCommentPresent () {
            return this.textComment_present == true;
        }
        
        public bool isEventTransitionRecordPresent () {
            return this.eventTransitionRecord_present == true;
        }
        
        public bool isJournalVariablesPresent () {
            return this.journalVariables_present == true;
        }
        

            public void initWithDefaults() {
            	
            }


            private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(Journal_Entry_instance));
            public IASN1PreparedElementData PreparedData {
            	get { return preparedData; }
            }

            
    }
            
}
