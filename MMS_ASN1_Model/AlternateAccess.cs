
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

using System;
using org.bn.attributes;
using org.bn.attributes.constraints;
using org.bn.coders;
using org.bn.types;
using org.bn;

namespace MMS_ASN1_Model {


    [ASN1PreparedElement]
    [ASN1BoxedType ( Name = "AlternateAccess" ) ]
    public class AlternateAccess : IASN1PreparedElement {

	    private System.Collections.Generic.ICollection<AlternateAccessChoiceType> val = null; 
            
            

    [ASN1PreparedElement]    
    [ASN1Choice ( Name = "AlternateAccess" )]
    public class AlternateAccessChoiceType : IASN1PreparedElement  {
	            
        
	private AlternateAccessSelection unnamed_ ;
        private bool  unnamed_selected = false ;
        
                
        
        [ASN1Element ( Name = "unnamed", IsOptional =  false , HasTag =  false  , HasDefaultValue =  false )  ]
    
        public AlternateAccessSelection Unnamed
        {
            get { return unnamed_; }
            set { selectUnnamed(value); }
        }
        
                
          
        
	private NamedSequenceType named_ ;
        private bool  named_selected = false ;
        
                
        
       [ASN1PreparedElement]
       [ASN1Sequence ( Name = "named", IsSet = false  )]
       public class NamedSequenceType : IASN1PreparedElement {
                        
	private Identifier componentName_ ;
	
        [ASN1Element ( Name = "componentName", IsOptional =  false , HasTag =  true, Tag = 0 , HasDefaultValue =  false )  ]
    
        public Identifier ComponentName
        {
            get { return componentName_; }
            set { componentName_ = value;  }
        }
        
                
          
	private AlternateAccessSelection access_ ;
	
        [ASN1Element ( Name = "access", IsOptional =  false , HasTag =  false  , HasDefaultValue =  false )  ]
    
        public AlternateAccessSelection Access
        {
            get { return access_; }
            set { access_ = value;  }
        }
        
                
  
                
                public void initWithDefaults() {
            		
                }

            private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(NamedSequenceType));
            public IASN1PreparedElementData PreparedData {
            	get { return preparedData; }
            }

                
       }
                
        [ASN1Element ( Name = "named", IsOptional =  false , HasTag =  true, Tag = 5 , HasDefaultValue =  false )  ]
    
        public NamedSequenceType Named
        {
            get { return named_; }
            set { selectNamed(value); }
        }
        
                
          
        public bool isUnnamedSelected () {
            return this.unnamed_selected ;
        }

        


        public void selectUnnamed (AlternateAccessSelection val) {
            this.unnamed_ = val;
            this.unnamed_selected = true;
            
            
                    this.named_selected = false;
                            
        }
        
          
        public bool isNamedSelected () {
            return this.named_selected ;
        }

        


        public void selectNamed (NamedSequenceType val) {
            this.named_ = val;
            this.named_selected = true;
            
            
                    this.unnamed_selected = false;
                            
        }
        
  

            public void initWithDefaults()
	    {
	    }

            private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(AlternateAccessChoiceType));
            public IASN1PreparedElementData PreparedData {
            	get { return preparedData; }
            }

    }
                
            [ASN1SequenceOf( Name = "AlternateAccess", IsSetOf = false) ]

            public System.Collections.Generic.ICollection<AlternateAccessChoiceType> Value
            {
                get { return val; }
                set { val = value; }
            }
            
            public void initValue() {
                this.Value = new System.Collections.Generic.List<AlternateAccessChoiceType>();
            }
            
            public void Add(AlternateAccessChoiceType item) {
                this.Value.Add(item);
            }

            public void initWithDefaults()
	    {
	    }


            private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(AlternateAccess));
            public IASN1PreparedElementData PreparedData {
            	get { return preparedData; }
            }

    }
            
}
