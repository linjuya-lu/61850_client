
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

using System;
using org.bn.attributes;
using org.bn.attributes.constraints;
using org.bn.coders;
using org.bn.types;
using org.bn;

namespace MMS_ASN1_Model
{


    [ASN1PreparedElement]
    [ASN1Sequence(Name = "EventNotification", IsSet = false)]
    public class EventNotification : IASN1PreparedElement
    {

        private ObjectName eventEnrollmentName_;

        [ASN1Element(Name = "eventEnrollmentName", IsOptional = false, HasTag = true, Tag = 0, HasDefaultValue = false)]

        public ObjectName EventEnrollmentName
        {
            get { return eventEnrollmentName_; }
            set { eventEnrollmentName_ = value; }
        }



        private ObjectName eventConditionName_;

        [ASN1Element(Name = "eventConditionName", IsOptional = false, HasTag = true, Tag = 1, HasDefaultValue = false)]

        public ObjectName EventConditionName
        {
            get { return eventConditionName_; }
            set { eventConditionName_ = value; }
        }



        private Severity severity_;

        [ASN1Element(Name = "severity", IsOptional = false, HasTag = true, Tag = 2, HasDefaultValue = false)]

        public Severity Severity
        {
            get { return severity_; }
            set { severity_ = value; }
        }



        private EC_State currentState_;

        private bool currentState_present = false;

        [ASN1Element(Name = "currentState", IsOptional = true, HasTag = true, Tag = 3, HasDefaultValue = false)]

        public EC_State CurrentState
        {
            get { return currentState_; }
            set { currentState_ = value; currentState_present = true; }
        }



        private EventTime transitionTime_;

        [ASN1Element(Name = "transitionTime", IsOptional = false, HasTag = true, Tag = 4, HasDefaultValue = false)]

        public EventTime TransitionTime
        {
            get { return transitionTime_; }
            set { transitionTime_ = value; }
        }



        private bool notificationLost_;
        [ASN1Boolean(Name = "")]

        [ASN1Element(Name = "notificationLost", IsOptional = false, HasTag = true, Tag = 6, HasDefaultValue = true)]

        public bool NotificationLost
        {
            get { return notificationLost_; }
            set { notificationLost_ = value; }
        }



        private AlarmAckRule alarmAcknowledgmentRule_;

        private bool alarmAcknowledgmentRule_present = false;

        [ASN1Element(Name = "alarmAcknowledgmentRule", IsOptional = true, HasTag = true, Tag = 7, HasDefaultValue = false)]

        public AlarmAckRule AlarmAcknowledgmentRule
        {
            get { return alarmAcknowledgmentRule_; }
            set { alarmAcknowledgmentRule_ = value; alarmAcknowledgmentRule_present = true; }
        }



        private ActionResultSequenceType actionResult_;

        private bool actionResult_present = false;

        [ASN1PreparedElement]
        [ASN1Sequence(Name = "actionResult", IsSet = false)]
        public class ActionResultSequenceType : IASN1PreparedElement
        {

            private ObjectName eventActionName_;

            [ASN1Element(Name = "eventActionName", IsOptional = false, HasTag = false, HasDefaultValue = false)]

            public ObjectName EventActionName
            {
                get { return eventActionName_; }
                set { eventActionName_ = value; }
            }



            private SuccessOrFailureChoiceType successOrFailure_;


            [ASN1PreparedElement]
            [ASN1Choice(Name = "successOrFailure")]
            public class SuccessOrFailureChoiceType : IASN1PreparedElement
            {


                private SuccessSequenceType success_;
                private bool success_selected = false;



                [ASN1PreparedElement]
                [ASN1Sequence(Name = "success", IsSet = false)]
                public class SuccessSequenceType : IASN1PreparedElement
                {

                    private ConfirmedServiceResponse confirmedServiceResponse_;

                    [ASN1Element(Name = "confirmedServiceResponse", IsOptional = false, HasTag = false, HasDefaultValue = false)]

                    public ConfirmedServiceResponse ConfirmedServiceResponse
                    {
                        get { return confirmedServiceResponse_; }
                        set { confirmedServiceResponse_ = value; }
                    }



                    private Response_Detail cs_Response_Detail_;

                    private bool cs_Response_Detail_present = false;

                    [ASN1Element(Name = "cs-Response-Detail", IsOptional = true, HasTag = true, Tag = 79, HasDefaultValue = false)]

                    public Response_Detail Cs_Response_Detail
                    {
                        get { return cs_Response_Detail_; }
                        set { cs_Response_Detail_ = value; cs_Response_Detail_present = true; }
                    }



                    public bool isCs_Response_DetailPresent()
                    {
                        return this.cs_Response_Detail_present == true;
                    }


                    public void initWithDefaults()
                    {

                    }

                    private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(SuccessSequenceType));
                    public IASN1PreparedElementData PreparedData
                    {
                        get { return preparedData; }
                    }


                }

                [ASN1Element(Name = "success", IsOptional = false, HasTag = true, Tag = 0, HasDefaultValue = false)]

                public SuccessSequenceType Success
                {
                    get { return success_; }
                    set { selectSuccess(value); }
                }




                private FailureSequenceType failure_;
                private bool failure_selected = false;



                [ASN1PreparedElement]
                [ASN1Sequence(Name = "failure", IsSet = false)]
                public class FailureSequenceType : IASN1PreparedElement
                {

                    private Unsigned32 modifierPosition_;

                    private bool modifierPosition_present = false;

                    [ASN1Element(Name = "modifierPosition", IsOptional = true, HasTag = true, Tag = 0, HasDefaultValue = false)]

                    public Unsigned32 ModifierPosition
                    {
                        get { return modifierPosition_; }
                        set { modifierPosition_ = value; modifierPosition_present = true; }
                    }



                    private ServiceError serviceError_;

                    [ASN1Element(Name = "serviceError", IsOptional = false, HasTag = true, Tag = 1, HasDefaultValue = false)]

                    public ServiceError ServiceError
                    {
                        get { return serviceError_; }
                        set { serviceError_ = value; }
                    }



                    public bool isModifierPositionPresent()
                    {
                        return this.modifierPosition_present == true;
                    }


                    public void initWithDefaults()
                    {

                    }

                    private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(FailureSequenceType));
                    public IASN1PreparedElementData PreparedData
                    {
                        get { return preparedData; }
                    }


                }

                [ASN1Element(Name = "failure", IsOptional = false, HasTag = true, Tag = 1, HasDefaultValue = false)]

                public FailureSequenceType Failure
                {
                    get { return failure_; }
                    set { selectFailure(value); }
                }



                public bool isSuccessSelected()
                {
                    return this.success_selected;
                }




                public void selectSuccess(SuccessSequenceType val)
                {
                    this.success_ = val;
                    this.success_selected = true;


                    this.failure_selected = false;

                }


                public bool isFailureSelected()
                {
                    return this.failure_selected;
                }




                public void selectFailure(FailureSequenceType val)
                {
                    this.failure_ = val;
                    this.failure_selected = true;


                    this.success_selected = false;

                }



                public void initWithDefaults()
                {
                }

                private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(SuccessOrFailureChoiceType));
                public IASN1PreparedElementData PreparedData
                {
                    get { return preparedData; }
                }

            }

            [ASN1Element(Name = "successOrFailure", IsOptional = false, HasTag = false, HasDefaultValue = false)]

            public SuccessOrFailureChoiceType SuccessOrFailure
            {
                get { return successOrFailure_; }
                set { successOrFailure_ = value; }
            }




            public void initWithDefaults()
            {

            }

            private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(ActionResultSequenceType));
            public IASN1PreparedElementData PreparedData
            {
                get { return preparedData; }
            }


        }

        [ASN1Element(Name = "actionResult", IsOptional = true, HasTag = true, Tag = 8, HasDefaultValue = false)]

        public ActionResultSequenceType ActionResult
        {
            get { return actionResult_; }
            set { actionResult_ = value; actionResult_present = true; }
        }



        public bool isCurrentStatePresent()
        {
            return this.currentState_present == true;
        }

        public bool isAlarmAcknowledgmentRulePresent()
        {
            return this.alarmAcknowledgmentRule_present == true;
        }

        public bool isActionResultPresent()
        {
            return this.actionResult_present == true;
        }


        public void initWithDefaults()
        {
            bool param_NotificationLost =
        false;
            NotificationLost = param_NotificationLost;

        }


        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(EventNotification));
        public IASN1PreparedElementData PreparedData
        {
            get { return preparedData; }
        }


    }

}
