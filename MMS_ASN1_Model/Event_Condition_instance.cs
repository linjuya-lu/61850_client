
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

using System;
using org.bn.attributes;
using org.bn.attributes.constraints;
using org.bn.coders;
using org.bn.types;
using org.bn;

namespace MMS_ASN1_Model {


    [ASN1PreparedElement]
    [ASN1Sequence ( Name = "Event_Condition_instance", IsSet = false  )]
    public class Event_Condition_instance : IASN1PreparedElement {
                    
	private ObjectName name_ ;
	
        [ASN1Element ( Name = "name", IsOptional =  false , HasTag =  true, Tag = 0 , HasDefaultValue =  false )  ]
    
        public ObjectName Name
        {
            get { return name_; }
            set { name_ = value;  }
        }
        
                
          
	private DefinitionChoiceType definition_ ;
	

    [ASN1PreparedElement]    
    [ASN1Choice ( Name = "definition" )]
    public class DefinitionChoiceType : IASN1PreparedElement  {
	            
        
	private ObjectIdentifier reference_ ;
        private bool  reference_selected = false ;
        
                
        [ASN1ObjectIdentifier( Name = "" )]
    
        [ASN1Element ( Name = "reference", IsOptional =  false , HasTag =  true, Tag = 1 , HasDefaultValue =  false )  ]
    
        public ObjectIdentifier Reference
        {
            get { return reference_; }
            set { selectReference(value); }
        }
        
                
          
        
	private DetailsSequenceType details_ ;
        private bool  details_selected = false ;
        
                
        
       [ASN1PreparedElement]
       [ASN1Sequence ( Name = "details", IsSet = false  )]
       public class DetailsSequenceType : IASN1PreparedElement {
                        
	private Access_Control_List_instance accessControl_ ;
	
        [ASN1Element ( Name = "accessControl", IsOptional =  false , HasTag =  true, Tag = 3 , HasDefaultValue =  false )  ]
    
        public Access_Control_List_instance AccessControl
        {
            get { return accessControl_; }
            set { accessControl_ = value;  }
        }
        
                
          
	private EC_Class ecClass_ ;
	
        [ASN1Element ( Name = "ecClass", IsOptional =  false , HasTag =  true, Tag = 4 , HasDefaultValue =  false )  ]
    
        public EC_Class EcClass
        {
            get { return ecClass_; }
            set { ecClass_ = value;  }
        }
        
                
          
	private EC_State ecState_ ;
	
        [ASN1Element ( Name = "ecState", IsOptional =  false , HasTag =  true, Tag = 5 , HasDefaultValue =  false )  ]
    
        public EC_State EcState
        {
            get { return ecState_; }
            set { ecState_ = value;  }
        }
        
                
          
	private Priority priority_ ;
	
        [ASN1Element ( Name = "priority", IsOptional =  false , HasTag =  true, Tag = 6 , HasDefaultValue =  false )  ]
    
        public Priority Priority
        {
            get { return priority_; }
            set { priority_ = value;  }
        }
        
                
          
	private Severity severity_ ;
	
        [ASN1Element ( Name = "severity", IsOptional =  false , HasTag =  true, Tag = 7 , HasDefaultValue =  false )  ]
    
        public Severity Severity
        {
            get { return severity_; }
            set { severity_ = value;  }
        }
        
                
          
	private System.Collections.Generic.ICollection<Event_Enrollment_instance> eventEnrollments_ ;
	
[ASN1SequenceOf( Name = "eventEnrollments", IsSetOf = false  )]

    
        [ASN1Element ( Name = "eventEnrollments", IsOptional =  false , HasTag =  true, Tag = 8 , HasDefaultValue =  false )  ]
    
        public System.Collections.Generic.ICollection<Event_Enrollment_instance> EventEnrollments
        {
            get { return eventEnrollments_; }
            set { eventEnrollments_ = value;  }
        }
        
                
          
	private bool enabled_ ;
	
        private bool  enabled_present = false ;
	[ASN1Boolean( Name = "" )]
    
        [ASN1Element ( Name = "enabled", IsOptional =  true , HasTag =  true, Tag = 9 , HasDefaultValue =  false )  ]
    
        public bool Enabled
        {
            get { return enabled_; }
            set { enabled_ = value; enabled_present = true;  }
        }
        
                
          
	private bool alarmSummaryReports_ ;
	
        private bool  alarmSummaryReports_present = false ;
	[ASN1Boolean( Name = "" )]
    
        [ASN1Element ( Name = "alarmSummaryReports", IsOptional =  true , HasTag =  true, Tag = 10 , HasDefaultValue =  false )  ]
    
        public bool AlarmSummaryReports
        {
            get { return alarmSummaryReports_; }
            set { alarmSummaryReports_ = value; alarmSummaryReports_present = true;  }
        }
        
                
          
	private MonitoredVariableChoiceType monitoredVariable_ ;
	
        private bool  monitoredVariable_present = false ;
	

    [ASN1PreparedElement]    
    [ASN1Choice ( Name = "monitoredVariable" )]
    public class MonitoredVariableChoiceType : IASN1PreparedElement  {
	            
        
	private Named_Variable_instance named_ ;
        private bool  named_selected = false ;
        
                
        
        [ASN1Element ( Name = "named", IsOptional =  false , HasTag =  true, Tag = 11 , HasDefaultValue =  false )  ]
    
        public Named_Variable_instance Named
        {
            get { return named_; }
            set { selectNamed(value); }
        }
        
                
          
        
	private Unnamed_Variable_instance unnamed_ ;
        private bool  unnamed_selected = false ;
        
                
        
        [ASN1Element ( Name = "unnamed", IsOptional =  false , HasTag =  true, Tag = 12 , HasDefaultValue =  false )  ]
    
        public Unnamed_Variable_instance Unnamed
        {
            get { return unnamed_; }
            set { selectUnnamed(value); }
        }
        
                
          
        
	private NullObject unspecified_ ;
        private bool  unspecified_selected = false ;
        
                
        
        [ASN1Null ( Name = "unspecified" )]
    
        [ASN1Element ( Name = "unspecified", IsOptional =  false , HasTag =  true, Tag = 13 , HasDefaultValue =  false )  ]
    
        public NullObject Unspecified
        {
            get { return unspecified_; }
            set { selectUnspecified(value); }
        }
        
                
          
        public bool isNamedSelected () {
            return this.named_selected ;
        }

        


        public void selectNamed (Named_Variable_instance val) {
            this.named_ = val;
            this.named_selected = true;
            
            
                    this.unnamed_selected = false;
                
                    this.unspecified_selected = false;
                            
        }
        
          
        public bool isUnnamedSelected () {
            return this.unnamed_selected ;
        }

        


        public void selectUnnamed (Unnamed_Variable_instance val) {
            this.unnamed_ = val;
            this.unnamed_selected = true;
            
            
                    this.named_selected = false;
                
                    this.unspecified_selected = false;
                            
        }
        
          
        public bool isUnspecifiedSelected () {
            return this.unspecified_selected ;
        }

        
        public void selectUnspecified () {
            selectUnspecified (new NullObject());
	}
	


        public void selectUnspecified (NullObject val) {
            this.unspecified_ = val;
            this.unspecified_selected = true;
            
            
                    this.named_selected = false;
                
                    this.unnamed_selected = false;
                            
        }
        
  

            public void initWithDefaults()
	    {
	    }

            private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(MonitoredVariableChoiceType));
            public IASN1PreparedElementData PreparedData {
            	get { return preparedData; }
            }

    }
                
        [ASN1Element ( Name = "monitoredVariable", IsOptional =  true , HasTag =  false  , HasDefaultValue =  false )  ]
    
        public MonitoredVariableChoiceType MonitoredVariable
        {
            get { return monitoredVariable_; }
            set { monitoredVariable_ = value; monitoredVariable_present = true;  }
        }
        
                
          
	private long evaluationInterval_ ;
	
        private bool  evaluationInterval_present = false ;
	[ASN1Integer( Name = "" )]
    
        [ASN1Element ( Name = "evaluationInterval", IsOptional =  true , HasTag =  true, Tag = 14 , HasDefaultValue =  false )  ]
    
        public long EvaluationInterval
        {
            get { return evaluationInterval_; }
            set { evaluationInterval_ = value; evaluationInterval_present = true;  }
        }
        
                
          
	private DisplayEnhancementChoiceType displayEnhancement_ ;
	

    [ASN1PreparedElement]    
    [ASN1Choice ( Name = "displayEnhancement" )]
    public class DisplayEnhancementChoiceType : IASN1PreparedElement  {
	            
        
	private MMSString text_ ;
        private bool  text_selected = false ;
        
                
        
        [ASN1Element ( Name = "text", IsOptional =  false , HasTag =  true, Tag = 15 , HasDefaultValue =  false )  ]
    
        public MMSString Text
        {
            get { return text_; }
            set { selectText(value); }
        }
        
                
          
        
	private long number_ ;
        private bool  number_selected = false ;
        
                
        [ASN1Integer( Name = "" )]
    
        [ASN1Element ( Name = "number", IsOptional =  false , HasTag =  true, Tag = 16 , HasDefaultValue =  false )  ]
    
        public long Number
        {
            get { return number_; }
            set { selectNumber(value); }
        }
        
                
          
        
	private NullObject none_ ;
        private bool  none_selected = false ;
        
                
        
        [ASN1Null ( Name = "none" )]
    
        [ASN1Element ( Name = "none", IsOptional =  false , HasTag =  true, Tag = 17 , HasDefaultValue =  false )  ]
    
        public NullObject None
        {
            get { return none_; }
            set { selectNone(value); }
        }
        
                
          
        public bool isTextSelected () {
            return this.text_selected ;
        }

        


        public void selectText (MMSString val) {
            this.text_ = val;
            this.text_selected = true;
            
            
                    this.number_selected = false;
                
                    this.none_selected = false;
                            
        }
        
          
        public bool isNumberSelected () {
            return this.number_selected ;
        }

        


        public void selectNumber (long val) {
            this.number_ = val;
            this.number_selected = true;
            
            
                    this.text_selected = false;
                
                    this.none_selected = false;
                            
        }
        
          
        public bool isNoneSelected () {
            return this.none_selected ;
        }

        
        public void selectNone () {
            selectNone (new NullObject());
	}
	


        public void selectNone (NullObject val) {
            this.none_ = val;
            this.none_selected = true;
            
            
                    this.text_selected = false;
                
                    this.number_selected = false;
                            
        }
        
  

            public void initWithDefaults()
	    {
	    }

            private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(DisplayEnhancementChoiceType));
            public IASN1PreparedElementData PreparedData {
            	get { return preparedData; }
            }

    }
                
        [ASN1Element ( Name = "displayEnhancement", IsOptional =  false , HasTag =  false  , HasDefaultValue =  false )  ]
    
        public DisplayEnhancementChoiceType DisplayEnhancement
        {
            get { return displayEnhancement_; }
            set { displayEnhancement_ = value;  }
        }
        
                
          
	private Group_Priority_OverrideChoiceType group_Priority_Override_ ;
	
        private bool  group_Priority_Override_present = false ;
	

    [ASN1PreparedElement]    
    [ASN1Choice ( Name = "group-Priority-Override" )]
    public class Group_Priority_OverrideChoiceType : IASN1PreparedElement  {
	            
        
	private Priority priority_ ;
        private bool  priority_selected = false ;
        
                
        
        [ASN1Element ( Name = "priority", IsOptional =  false , HasTag =  true, Tag = 18 , HasDefaultValue =  false )  ]
    
        public Priority Priority
        {
            get { return priority_; }
            set { selectPriority(value); }
        }
        
                
          
        
	private NullObject undefined_ ;
        private bool  undefined_selected = false ;
        
                
        
        [ASN1Null ( Name = "undefined" )]
    
        [ASN1Element ( Name = "undefined", IsOptional =  false , HasTag =  true, Tag = 19 , HasDefaultValue =  false )  ]
    
        public NullObject Undefined
        {
            get { return undefined_; }
            set { selectUndefined(value); }
        }
        
                
          
        public bool isPrioritySelected () {
            return this.priority_selected ;
        }

        


        public void selectPriority (Priority val) {
            this.priority_ = val;
            this.priority_selected = true;
            
            
                    this.undefined_selected = false;
                            
        }
        
          
        public bool isUndefinedSelected () {
            return this.undefined_selected ;
        }

        
        public void selectUndefined () {
            selectUndefined (new NullObject());
	}
	


        public void selectUndefined (NullObject val) {
            this.undefined_ = val;
            this.undefined_selected = true;
            
            
                    this.priority_selected = false;
                            
        }
        
  

            public void initWithDefaults()
	    {
	    }

            private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(Group_Priority_OverrideChoiceType));
            public IASN1PreparedElementData PreparedData {
            	get { return preparedData; }
            }

    }
                
        [ASN1Element ( Name = "group-Priority-Override", IsOptional =  true , HasTag =  false  , HasDefaultValue =  false )  ]
    
        public Group_Priority_OverrideChoiceType Group_Priority_Override
        {
            get { return group_Priority_Override_; }
            set { group_Priority_Override_ = value; group_Priority_Override_present = true;  }
        }
        
                
          
	private System.Collections.Generic.ICollection<Event_Condition_List_instance> referencingEventConditionLists_ ;
	
[ASN1SequenceOf( Name = "referencingEventConditionLists", IsSetOf = false  )]

    
        [ASN1Element ( Name = "referencingEventConditionLists", IsOptional =  false , HasTag =  true, Tag = 20 , HasDefaultValue =  false )  ]
    
        public System.Collections.Generic.ICollection<Event_Condition_List_instance> ReferencingEventConditionLists
        {
            get { return referencingEventConditionLists_; }
            set { referencingEventConditionLists_ = value;  }
        }
        
                
  
        public bool isEnabledPresent () {
            return this.enabled_present == true;
        }
        
        public bool isAlarmSummaryReportsPresent () {
            return this.alarmSummaryReports_present == true;
        }
        
        public bool isMonitoredVariablePresent () {
            return this.monitoredVariable_present == true;
        }
        
        public bool isEvaluationIntervalPresent () {
            return this.evaluationInterval_present == true;
        }
        
        public bool isGroup_Priority_OverridePresent () {
            return this.group_Priority_Override_present == true;
        }
        
                
                public void initWithDefaults() {
            		
                }

            private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(DetailsSequenceType));
            public IASN1PreparedElementData PreparedData {
            	get { return preparedData; }
            }

                
       }
                
        [ASN1Element ( Name = "details", IsOptional =  false , HasTag =  true, Tag = 2 , HasDefaultValue =  false )  ]
    
        public DetailsSequenceType Details
        {
            get { return details_; }
            set { selectDetails(value); }
        }
        
                
          
        public bool isReferenceSelected () {
            return this.reference_selected ;
        }

        


        public void selectReference (ObjectIdentifier val) {
            this.reference_ = val;
            this.reference_selected = true;
            
            
                    this.details_selected = false;
                            
        }
        
          
        public bool isDetailsSelected () {
            return this.details_selected ;
        }

        


        public void selectDetails (DetailsSequenceType val) {
            this.details_ = val;
            this.details_selected = true;
            
            
                    this.reference_selected = false;
                            
        }
        
  

            public void initWithDefaults()
	    {
	    }

            private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(DefinitionChoiceType));
            public IASN1PreparedElementData PreparedData {
            	get { return preparedData; }
            }

    }
                
        [ASN1Element ( Name = "definition", IsOptional =  false , HasTag =  false  , HasDefaultValue =  false )  ]
    
        public DefinitionChoiceType Definition
        {
            get { return definition_; }
            set { definition_ = value;  }
        }
        
                
  

            public void initWithDefaults() {
            	
            }


            private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(Event_Condition_instance));
            public IASN1PreparedElementData PreparedData {
            	get { return preparedData; }
            }

            
    }
            
}
