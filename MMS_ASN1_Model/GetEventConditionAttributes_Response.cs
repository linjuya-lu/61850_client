
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

using System;
using org.bn.attributes;
using org.bn.attributes.constraints;
using org.bn.coders;
using org.bn.types;
using org.bn;

namespace MMS_ASN1_Model
{


    [ASN1PreparedElement]
    [ASN1Sequence(Name = "GetEventConditionAttributes_Response", IsSet = false)]
    public class GetEventConditionAttributes_Response : IASN1PreparedElement
    {

        private bool mmsDeletable_;
        [ASN1Boolean(Name = "")]

        [ASN1Element(Name = "mmsDeletable", IsOptional = false, HasTag = true, Tag = 0, HasDefaultValue = true)]

        public bool MmsDeletable
        {
            get { return mmsDeletable_; }
            set { mmsDeletable_ = value; }
        }



        private EC_Class class__;

        [ASN1Element(Name = "class", IsOptional = false, HasTag = true, Tag = 1, HasDefaultValue = false)]

        public EC_Class Class_
        {
            get { return class__; }
            set { class__ = value; }
        }



        private Priority priority_;

        [ASN1Element(Name = "priority", IsOptional = false, HasTag = true, Tag = 2, HasDefaultValue = true)]

        public Priority Priority
        {
            get { return priority_; }
            set { priority_ = value; }
        }



        private Unsigned8 severity_;

        [ASN1Element(Name = "severity", IsOptional = false, HasTag = true, Tag = 3, HasDefaultValue = true)]

        public Unsigned8 Severity
        {
            get { return severity_; }
            set { severity_ = value; }
        }



        private bool alarmSummaryReports_;
        [ASN1Boolean(Name = "")]

        [ASN1Element(Name = "alarmSummaryReports", IsOptional = false, HasTag = true, Tag = 4, HasDefaultValue = true)]

        public bool AlarmSummaryReports
        {
            get { return alarmSummaryReports_; }
            set { alarmSummaryReports_ = value; }
        }



        private MonitoredVariableChoiceType monitoredVariable_;

        private bool monitoredVariable_present = false;


        [ASN1PreparedElement]
        [ASN1Choice(Name = "monitoredVariable")]
        public class MonitoredVariableChoiceType : IASN1PreparedElement
        {


            private VariableSpecification variableReference_;
            private bool variableReference_selected = false;



            [ASN1Element(Name = "variableReference", IsOptional = false, HasTag = true, Tag = 0, HasDefaultValue = false)]

            public VariableSpecification VariableReference
            {
                get { return variableReference_; }
                set { selectVariableReference(value); }
            }




            private NullObject undefined_;
            private bool undefined_selected = false;



            [ASN1Null(Name = "undefined")]

            [ASN1Element(Name = "undefined", IsOptional = false, HasTag = true, Tag = 1, HasDefaultValue = false)]

            public NullObject Undefined
            {
                get { return undefined_; }
                set { selectUndefined(value); }
            }



            public bool isVariableReferenceSelected()
            {
                return this.variableReference_selected;
            }




            public void selectVariableReference(VariableSpecification val)
            {
                this.variableReference_ = val;
                this.variableReference_selected = true;


                this.undefined_selected = false;

            }


            public bool isUndefinedSelected()
            {
                return this.undefined_selected;
            }


            public void selectUndefined()
            {
                selectUndefined(new NullObject());
            }



            public void selectUndefined(NullObject val)
            {
                this.undefined_ = val;
                this.undefined_selected = true;


                this.variableReference_selected = false;

            }



            public void initWithDefaults()
            {
            }

            private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(MonitoredVariableChoiceType));
            public IASN1PreparedElementData PreparedData
            {
                get { return preparedData; }
            }

        }

        [ASN1Element(Name = "monitoredVariable", IsOptional = true, HasTag = true, Tag = 6, HasDefaultValue = false)]

        public MonitoredVariableChoiceType MonitoredVariable
        {
            get { return monitoredVariable_; }
            set { monitoredVariable_ = value; monitoredVariable_present = true; }
        }



        private Unsigned32 evaluationInterval_;

        private bool evaluationInterval_present = false;

        [ASN1Element(Name = "evaluationInterval", IsOptional = true, HasTag = true, Tag = 7, HasDefaultValue = false)]

        public Unsigned32 EvaluationInterval
        {
            get { return evaluationInterval_; }
            set { evaluationInterval_ = value; evaluationInterval_present = true; }
        }



        private Identifier accessControlList_;

        private bool accessControlList_present = false;

        [ASN1Element(Name = "accessControlList", IsOptional = true, HasTag = true, Tag = 8, HasDefaultValue = false)]

        public Identifier AccessControlList
        {
            get { return accessControlList_; }
            set { accessControlList_ = value; accessControlList_present = true; }
        }



        public bool isMonitoredVariablePresent()
        {
            return this.monitoredVariable_present == true;
        }

        public bool isEvaluationIntervalPresent()
        {
            return this.evaluationInterval_present == true;
        }

        public bool isAccessControlListPresent()
        {
            return this.accessControlList_present == true;
        }


        public void initWithDefaults()
        {
            bool param_MmsDeletable =
        false;
            MmsDeletable = param_MmsDeletable;
            Priority param_Priority =
                    new Priority(64);
            Priority = param_Priority;
            Unsigned8 param_Severity =
                    new Unsigned8(64);
            Severity = param_Severity;
            bool param_AlarmSummaryReports =
                    false;
            AlarmSummaryReports = param_AlarmSummaryReports;

        }


        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(GetEventConditionAttributes_Response));
        public IASN1PreparedElementData PreparedData
        {
            get { return preparedData; }
        }


    }

}
