
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

using System;
using org.bn.attributes;
using org.bn.attributes.constraints;
using org.bn.coders;
using org.bn.types;
using org.bn;

namespace MMS_ASN1_Model {


    [ASN1PreparedElement]
    [ASN1Sequence ( Name = "GetProgramInvocationAttributes_Response", IsSet = false  )]
    public class GetProgramInvocationAttributes_Response : IASN1PreparedElement {
                    
	private ProgramInvocationState state_ ;
	
        [ASN1Element ( Name = "state", IsOptional =  false , HasTag =  true, Tag = 0 , HasDefaultValue =  false )  ]
    
        public ProgramInvocationState State
        {
            get { return state_; }
            set { state_ = value;  }
        }
        
                
          
	private System.Collections.Generic.ICollection<Identifier> listOfDomainNames_ ;
	
[ASN1SequenceOf( Name = "listOfDomainNames", IsSetOf = false  )]

    
        [ASN1Element ( Name = "listOfDomainNames", IsOptional =  false , HasTag =  true, Tag = 1 , HasDefaultValue =  false )  ]
    
        public System.Collections.Generic.ICollection<Identifier> ListOfDomainNames
        {
            get { return listOfDomainNames_; }
            set { listOfDomainNames_ = value;  }
        }
        
                
          
	private bool mmsDeletable_ ;
	[ASN1Boolean( Name = "" )]
    
        [ASN1Element ( Name = "mmsDeletable", IsOptional =  false , HasTag =  true, Tag = 2 , HasDefaultValue =  false )  ]
    
        public bool MmsDeletable
        {
            get { return mmsDeletable_; }
            set { mmsDeletable_ = value;  }
        }
        
                
          
	private bool reusable_ ;
	[ASN1Boolean( Name = "" )]
    
        [ASN1Element ( Name = "reusable", IsOptional =  false , HasTag =  true, Tag = 3 , HasDefaultValue =  false )  ]
    
        public bool Reusable
        {
            get { return reusable_; }
            set { reusable_ = value;  }
        }
        
                
          
	private bool monitor_ ;
	[ASN1Boolean( Name = "" )]
    
        [ASN1Element ( Name = "monitor", IsOptional =  false , HasTag =  true, Tag = 4 , HasDefaultValue =  false )  ]
    
        public bool Monitor
        {
            get { return monitor_; }
            set { monitor_ = value;  }
        }
        
                
          
	private ExecutionArgumentChoiceType executionArgument_ ;
	

    [ASN1PreparedElement]    
    [ASN1Choice ( Name = "executionArgument" )]
    public class ExecutionArgumentChoiceType : IASN1PreparedElement  {
	            
        
	private MMSString simpleString_ ;
        private bool  simpleString_selected = false ;
        
                
        
        [ASN1Element ( Name = "simpleString", IsOptional =  false , HasTag =  true, Tag = 5 , HasDefaultValue =  false )  ]
    
        public MMSString SimpleString
        {
            get { return simpleString_; }
            set { selectSimpleString(value); }
        }
        
                
          
        public bool isSimpleStringSelected () {
            return this.simpleString_selected ;
        }

        


        public void selectSimpleString (MMSString val) {
            this.simpleString_ = val;
            this.simpleString_selected = true;
            
                        
        }
        
  

            public void initWithDefaults()
	    {
	    }

            private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(ExecutionArgumentChoiceType));
            public IASN1PreparedElementData PreparedData {
            	get { return preparedData; }
            }

    }
                
        [ASN1Element ( Name = "executionArgument", IsOptional =  false , HasTag =  false  , HasDefaultValue =  false )  ]
    
        public ExecutionArgumentChoiceType ExecutionArgument
        {
            get { return executionArgument_; }
            set { executionArgument_ = value;  }
        }
        
                
          
	private Identifier accessControlList_ ;
	
        private bool  accessControlList_present = false ;
	
        [ASN1Element ( Name = "accessControlList", IsOptional =  true , HasTag =  true, Tag = 6 , HasDefaultValue =  false )  ]
    
        public Identifier AccessControlList
        {
            get { return accessControlList_; }
            set { accessControlList_ = value; accessControlList_present = true;  }
        }
        
                
  
        public bool isAccessControlListPresent () {
            return this.accessControlList_present == true;
        }
        

            public void initWithDefaults() {
            	
            }


            private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(GetProgramInvocationAttributes_Response));
            public IASN1PreparedElementData PreparedData {
            	get { return preparedData; }
            }

            
    }
            
}
