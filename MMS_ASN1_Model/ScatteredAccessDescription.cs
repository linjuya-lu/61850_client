
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

using System;
using org.bn.attributes;
using org.bn.attributes.constraints;
using org.bn.coders;
using org.bn.types;
using org.bn;

namespace MMS_ASN1_Model {


    [ASN1PreparedElement]
    [ASN1BoxedType ( Name = "ScatteredAccessDescription" ) ]
    public class ScatteredAccessDescription : IASN1PreparedElement {

	    private System.Collections.Generic.ICollection<ScatteredAccessDescriptionSequenceType> val = null; 
            
            
       [ASN1PreparedElement]
       [ASN1Sequence ( Name = "ScatteredAccessDescription", IsSet = false  )]
       public class ScatteredAccessDescriptionSequenceType : IASN1PreparedElement {
                        
	private Identifier componentName_ ;
	
        private bool  componentName_present = false ;
	
        [ASN1Element ( Name = "componentName", IsOptional =  true , HasTag =  true, Tag = 0 , HasDefaultValue =  false )  ]
    
        public Identifier ComponentName
        {
            get { return componentName_; }
            set { componentName_ = value; componentName_present = true;  }
        }
        
                
          
	private VariableSpecification variableSpecification_ ;
	
        [ASN1Element ( Name = "variableSpecification", IsOptional =  false , HasTag =  true, Tag = 1 , HasDefaultValue =  false )  ]
    
        public VariableSpecification VariableSpecification
        {
            get { return variableSpecification_; }
            set { variableSpecification_ = value;  }
        }
        
                
          
	private AlternateAccess alternateAccess_ ;
	
        private bool  alternateAccess_present = false ;
	
        [ASN1Element ( Name = "alternateAccess", IsOptional =  true , HasTag =  true, Tag = 2 , HasDefaultValue =  false )  ]
    
        public AlternateAccess AlternateAccess
        {
            get { return alternateAccess_; }
            set { alternateAccess_ = value; alternateAccess_present = true;  }
        }
        
                
  
        public bool isComponentNamePresent () {
            return this.componentName_present == true;
        }
        
        public bool isAlternateAccessPresent () {
            return this.alternateAccess_present == true;
        }
        
                
                public void initWithDefaults() {
            		
                }

            private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(ScatteredAccessDescriptionSequenceType));
            public IASN1PreparedElementData PreparedData {
            	get { return preparedData; }
            }

                
       }
                
            [ASN1SequenceOf( Name = "ScatteredAccessDescription", IsSetOf = false) ]

            public System.Collections.Generic.ICollection<ScatteredAccessDescriptionSequenceType> Value
            {
                get { return val; }
                set { val = value; }
            }
            
            public void initValue() {
                this.Value = new System.Collections.Generic.List<ScatteredAccessDescriptionSequenceType>();
            }
            
            public void Add(ScatteredAccessDescriptionSequenceType item) {
                this.Value.Add(item);
            }

            public void initWithDefaults()
	    {
	    }


            private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(ScatteredAccessDescription));
            public IASN1PreparedElementData PreparedData {
            	get { return preparedData; }
            }

    }
            
}
