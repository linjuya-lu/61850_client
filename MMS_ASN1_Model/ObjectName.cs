
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

using System;
using org.bn.attributes;
using org.bn.attributes.constraints;
using org.bn.coders;
using org.bn.types;
using org.bn;

namespace MMS_ASN1_Model
{


    [ASN1PreparedElement]
    [ASN1Choice(Name = "ObjectName")]
    public class ObjectName : IASN1PreparedElement
    {


        private Identifier vmd_specific_;
        private bool vmd_specific_selected = false;



        [ASN1Element(Name = "vmd-specific", IsOptional = false, HasTag = true, Tag = 0, HasDefaultValue = false)]

        public Identifier Vmd_specific
        {
            get { return vmd_specific_; }
            set { selectVmd_specific(value); }
        }




        private Domain_specificSequenceType domain_specific_;
        private bool domain_specific_selected = false;



        [ASN1PreparedElement]
        [ASN1Sequence(Name = "domain-specific", IsSet = false)]
        public class Domain_specificSequenceType : IASN1PreparedElement
        {

            private Identifier domainID_;

            [ASN1Element(Name = "domainID", IsOptional = false, HasTag = false, HasDefaultValue = false)]

            public Identifier DomainID
            {
                get { return domainID_; }
                set { domainID_ = value; }
            }



            private Identifier itemID_;

            [ASN1Element(Name = "itemID", IsOptional = false, HasTag = false, HasDefaultValue = false)]

            public Identifier ItemID
            {
                get { return itemID_; }
                set { itemID_ = value; }
            }




            public void initWithDefaults()
            {

            }

            private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(Domain_specificSequenceType));
            public IASN1PreparedElementData PreparedData
            {
                get { return preparedData; }
            }


        }

        [ASN1Element(Name = "domain-specific", IsOptional = false, HasTag = true, Tag = 1, HasDefaultValue = false)]

        public Domain_specificSequenceType Domain_specific
        {
            get { return domain_specific_; }
            set { selectDomain_specific(value); }
        }




        private Identifier aa_specific_;
        private bool aa_specific_selected = false;



        [ASN1Element(Name = "aa-specific", IsOptional = false, HasTag = true, Tag = 2, HasDefaultValue = false)]

        public Identifier Aa_specific
        {
            get { return aa_specific_; }
            set { selectAa_specific(value); }
        }



        public bool isVmd_specificSelected()
        {
            return this.vmd_specific_selected;
        }




        public void selectVmd_specific(Identifier val)
        {
            this.vmd_specific_ = val;
            this.vmd_specific_selected = true;


            this.domain_specific_selected = false;

            this.aa_specific_selected = false;

        }


        public bool isDomain_specificSelected()
        {
            return this.domain_specific_selected;
        }




        public void selectDomain_specific(Domain_specificSequenceType val)
        {
            this.domain_specific_ = val;
            this.domain_specific_selected = true;


            this.vmd_specific_selected = false;

            this.aa_specific_selected = false;

        }


        public bool isAa_specificSelected()
        {
            return this.aa_specific_selected;
        }




        public void selectAa_specific(Identifier val)
        {
            this.aa_specific_ = val;
            this.aa_specific_selected = true;

            this.vmd_specific_selected = false;

            this.domain_specific_selected = false;

        }



        public void initWithDefaults()
        {
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(ObjectName));
        public IASN1PreparedElementData PreparedData
        {
            get { return preparedData; }
        }

    }

}
