
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

using System;
using org.bn.attributes;
using org.bn.attributes.constraints;
using org.bn.coders;
using org.bn.types;
using org.bn;

namespace MMS_ASN1_Model {


    [ASN1PreparedElement]
    [ASN1Sequence ( Name = "AttachToEventCondition", IsSet = false  )]
    public class AttachToEventCondition : IASN1PreparedElement {
                    
	private ObjectName eventEnrollmentName_ ;
	
        [ASN1Element ( Name = "eventEnrollmentName", IsOptional =  false , HasTag =  true, Tag = 0 , HasDefaultValue =  false )  ]
    
        public ObjectName EventEnrollmentName
        {
            get { return eventEnrollmentName_; }
            set { eventEnrollmentName_ = value;  }
        }
        
                
          
	private ObjectName eventConditionName_ ;
	
        [ASN1Element ( Name = "eventConditionName", IsOptional =  false , HasTag =  true, Tag = 1 , HasDefaultValue =  false )  ]
    
        public ObjectName EventConditionName
        {
            get { return eventConditionName_; }
            set { eventConditionName_ = value;  }
        }
        
                
          
	private Transitions causingTransitions_ ;
	
        [ASN1Element ( Name = "causingTransitions", IsOptional =  false , HasTag =  true, Tag = 2 , HasDefaultValue =  false )  ]
    
        public Transitions CausingTransitions
        {
            get { return causingTransitions_; }
            set { causingTransitions_ = value;  }
        }
        
                
          
	private Unsigned32 acceptableDelay_ ;
	
        private bool  acceptableDelay_present = false ;
	
        [ASN1Element ( Name = "acceptableDelay", IsOptional =  true , HasTag =  true, Tag = 3 , HasDefaultValue =  false )  ]
    
        public Unsigned32 AcceptableDelay
        {
            get { return acceptableDelay_; }
            set { acceptableDelay_ = value; acceptableDelay_present = true;  }
        }
        
                
  
        public bool isAcceptableDelayPresent () {
            return this.acceptableDelay_present == true;
        }
        

            public void initWithDefaults() {
            	
            }


            private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(AttachToEventCondition));
            public IASN1PreparedElementData PreparedData {
            	get { return preparedData; }
            }

            
    }
            
}
