
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

using System;
using org.bn.attributes;
using org.bn.attributes.constraints;
using org.bn.coders;
using org.bn.types;
using org.bn;

namespace MMS_ASN1_Model {


    [ASN1PreparedElement]
    [ASN1Sequence ( Name = "AlterEventConditionListMonitoring_Request", IsSet = false  )]
    public class AlterEventConditionListMonitoring_Request : IASN1PreparedElement {
                    
	private ObjectName eventConditionListName_ ;
	
        [ASN1Element ( Name = "eventConditionListName", IsOptional =  false , HasTag =  true, Tag = 0 , HasDefaultValue =  false )  ]
    
        public ObjectName EventConditionListName
        {
            get { return eventConditionListName_; }
            set { eventConditionListName_ = value;  }
        }
        
                
          
	private bool enabled_ ;
	[ASN1Boolean( Name = "" )]
    
        [ASN1Element ( Name = "enabled", IsOptional =  false , HasTag =  true, Tag = 1 , HasDefaultValue =  false )  ]
    
        public bool Enabled
        {
            get { return enabled_; }
            set { enabled_ = value;  }
        }
        
                
          
	private PriorityChangeChoiceType priorityChange_ ;
	
        private bool  priorityChange_present = false ;
	

    [ASN1PreparedElement]    
    [ASN1Choice ( Name = "priorityChange" )]
    public class PriorityChangeChoiceType : IASN1PreparedElement  {
	            
        
	private long priorityValue_ ;
        private bool  priorityValue_selected = false ;
        
                
        [ASN1Integer( Name = "" )]
    
        [ASN1Element ( Name = "priorityValue", IsOptional =  false , HasTag =  true, Tag = 0 , HasDefaultValue =  false )  ]
    
        public long PriorityValue
        {
            get { return priorityValue_; }
            set { selectPriorityValue(value); }
        }
        
                
          
        
	private NullObject priorityReset_ ;
        private bool  priorityReset_selected = false ;
        
                
        
        [ASN1Null ( Name = "priorityReset" )]
    
        [ASN1Element ( Name = "priorityReset", IsOptional =  false , HasTag =  true, Tag = 1 , HasDefaultValue =  false )  ]
    
        public NullObject PriorityReset
        {
            get { return priorityReset_; }
            set { selectPriorityReset(value); }
        }
        
                
          
        public bool isPriorityValueSelected () {
            return this.priorityValue_selected ;
        }

        


        public void selectPriorityValue (long val) {
            this.priorityValue_ = val;
            this.priorityValue_selected = true;
            
            
                    this.priorityReset_selected = false;
                            
        }
        
          
        public bool isPriorityResetSelected () {
            return this.priorityReset_selected ;
        }

        
        public void selectPriorityReset () {
            selectPriorityReset (new NullObject());
	}
	


        public void selectPriorityReset (NullObject val) {
            this.priorityReset_ = val;
            this.priorityReset_selected = true;
            
            
                    this.priorityValue_selected = false;
                            
        }
        
  

            public void initWithDefaults()
	    {
	    }

            private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(PriorityChangeChoiceType));
            public IASN1PreparedElementData PreparedData {
            	get { return preparedData; }
            }

    }
                
        [ASN1Element ( Name = "priorityChange", IsOptional =  true , HasTag =  true, Tag = 2 , HasDefaultValue =  false )  ]
    
        public PriorityChangeChoiceType PriorityChange
        {
            get { return priorityChange_; }
            set { priorityChange_ = value; priorityChange_present = true;  }
        }
        
                
  
        public bool isPriorityChangePresent () {
            return this.priorityChange_present == true;
        }
        

            public void initWithDefaults() {
            	
            }


            private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(AlterEventConditionListMonitoring_Request));
            public IASN1PreparedElementData PreparedData {
            	get { return preparedData; }
            }

            
    }
            
}
