
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

using System;
using org.bn.attributes;
using org.bn.attributes.constraints;
using org.bn.coders;
using org.bn.types;
using org.bn;

namespace MMS_ASN1_Model
{

    [ASN1PreparedElement]
    [ASN1Sequence(Name = "DeleteNamedVariableList_Request", IsSet = false)]
    public class DeleteNamedVariableList_Request : IASN1PreparedElement
    {
        public const long scopeOfDelete_specific	= 0;
	    public const long scopeOfDelete_aa_specific	= 1;
	    public const long scopeOfDelete_domain	= 2;
	    public const long scopeOfDelete_vmd	= 3;

        private long scopeOfDelete_;
        [ASN1Integer(Name = "")]

        [ASN1Element(Name = "scopeOfDelete", IsOptional = false, HasTag = true, Tag = 0, HasDefaultValue = true)]

        public long ScopeOfDelete
        {
            get { return scopeOfDelete_; }
            set { scopeOfDelete_ = value; }
        }



        private System.Collections.Generic.ICollection<ObjectName> listOfVariableListName_;

        private bool listOfVariableListName_present = false;

        [ASN1SequenceOf(Name = "listOfVariableListName", IsSetOf = false)]


        [ASN1Element(Name = "listOfVariableListName", IsOptional = true, HasTag = true, Tag = 1, HasDefaultValue = false)]

        public System.Collections.Generic.ICollection<ObjectName> ListOfVariableListName
        {
            get { return listOfVariableListName_; }
            set { listOfVariableListName_ = value; listOfVariableListName_present = true; }
        }



        private Identifier domainName_;

        private bool domainName_present = false;

        [ASN1Element(Name = "domainName", IsOptional = true, HasTag = true, Tag = 2, HasDefaultValue = false)]

        public Identifier DomainName
        {
            get { return domainName_; }
            set { domainName_ = value; domainName_present = true; }
        }



        public bool isListOfVariableListNamePresent()
        {
            return this.listOfVariableListName_present == true;
        }

        public bool isDomainNamePresent()
        {
            return this.domainName_present == true;
        }


        public void initWithDefaults()
        {
            long param_ScopeOfDelete =
        0;
            ScopeOfDelete = param_ScopeOfDelete;

        }


        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(DeleteNamedVariableList_Request));
        public IASN1PreparedElementData PreparedData
        {
            get { return preparedData; }
        }


    }

}
