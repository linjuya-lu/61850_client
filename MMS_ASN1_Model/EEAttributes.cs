
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

using System;
using org.bn.attributes;
using org.bn.attributes.constraints;
using org.bn.coders;
using org.bn.types;
using org.bn;

namespace MMS_ASN1_Model {


    [ASN1PreparedElement]
    [ASN1Sequence ( Name = "EEAttributes", IsSet = false  )]
    public class EEAttributes : IASN1PreparedElement {
                    
	private ObjectName eventEnrollmentName_ ;
	
        [ASN1Element ( Name = "eventEnrollmentName", IsOptional =  false , HasTag =  true, Tag = 0 , HasDefaultValue =  false )  ]
    
        public ObjectName EventEnrollmentName
        {
            get { return eventEnrollmentName_; }
            set { eventEnrollmentName_ = value;  }
        }
        
                
          
	private EventConditionNameChoiceType eventConditionName_ ;
	

    [ASN1PreparedElement]    
    [ASN1Choice ( Name = "eventConditionName" )]
    public class EventConditionNameChoiceType : IASN1PreparedElement  {
	            
        
	private ObjectName eventCondition_ ;
        private bool  eventCondition_selected = false ;
        
                
        
        [ASN1Element ( Name = "eventCondition", IsOptional =  false , HasTag =  true, Tag = 0 , HasDefaultValue =  false )  ]
    
        public ObjectName EventCondition
        {
            get { return eventCondition_; }
            set { selectEventCondition(value); }
        }
        
                
          
        
	private NullObject undefined_ ;
        private bool  undefined_selected = false ;
        
                
        
        [ASN1Null ( Name = "undefined" )]
    
        [ASN1Element ( Name = "undefined", IsOptional =  false , HasTag =  true, Tag = 1 , HasDefaultValue =  false )  ]
    
        public NullObject Undefined
        {
            get { return undefined_; }
            set { selectUndefined(value); }
        }
        
                
          
        public bool isEventConditionSelected () {
            return this.eventCondition_selected ;
        }

        


        public void selectEventCondition (ObjectName val) {
            this.eventCondition_ = val;
            this.eventCondition_selected = true;
            
            
                    this.undefined_selected = false;
                            
        }
        
          
        public bool isUndefinedSelected () {
            return this.undefined_selected ;
        }

        
        public void selectUndefined () {
            selectUndefined (new NullObject());
	}
	


        public void selectUndefined (NullObject val) {
            this.undefined_ = val;
            this.undefined_selected = true;
            
            
                    this.eventCondition_selected = false;
                            
        }
        
  

            public void initWithDefaults()
	    {
	    }

            private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(EventConditionNameChoiceType));
            public IASN1PreparedElementData PreparedData {
            	get { return preparedData; }
            }

    }
                
        [ASN1Element ( Name = "eventConditionName", IsOptional =  false , HasTag =  true, Tag = 1 , HasDefaultValue =  false )  ]
    
        public EventConditionNameChoiceType EventConditionName
        {
            get { return eventConditionName_; }
            set { eventConditionName_ = value;  }
        }
        
                
          
	private EventActionNameChoiceType eventActionName_ ;
	
        private bool  eventActionName_present = false ;
	

    [ASN1PreparedElement]    
    [ASN1Choice ( Name = "eventActionName" )]
    public class EventActionNameChoiceType : IASN1PreparedElement  {
	            
        
	private ObjectName eventAction_ ;
        private bool  eventAction_selected = false ;
        
                
        
        [ASN1Element ( Name = "eventAction", IsOptional =  false , HasTag =  true, Tag = 0 , HasDefaultValue =  false )  ]
    
        public ObjectName EventAction
        {
            get { return eventAction_; }
            set { selectEventAction(value); }
        }
        
                
          
        
	private NullObject undefined_ ;
        private bool  undefined_selected = false ;
        
                
        
        [ASN1Null ( Name = "undefined" )]
    
        [ASN1Element ( Name = "undefined", IsOptional =  false , HasTag =  true, Tag = 1 , HasDefaultValue =  false )  ]
    
        public NullObject Undefined
        {
            get { return undefined_; }
            set { selectUndefined(value); }
        }
        
                
          
        public bool isEventActionSelected () {
            return this.eventAction_selected ;
        }

        


        public void selectEventAction (ObjectName val) {
            this.eventAction_ = val;
            this.eventAction_selected = true;
            
            
                    this.undefined_selected = false;
                            
        }
        
          
        public bool isUndefinedSelected () {
            return this.undefined_selected ;
        }

        
        public void selectUndefined () {
            selectUndefined (new NullObject());
	}
	


        public void selectUndefined (NullObject val) {
            this.undefined_ = val;
            this.undefined_selected = true;
            
            
                    this.eventAction_selected = false;
                            
        }
        
  

            public void initWithDefaults()
	    {
	    }

            private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(EventActionNameChoiceType));
            public IASN1PreparedElementData PreparedData {
            	get { return preparedData; }
            }

    }
                
        [ASN1Element ( Name = "eventActionName", IsOptional =  true , HasTag =  true, Tag = 2 , HasDefaultValue =  false )  ]
    
        public EventActionNameChoiceType EventActionName
        {
            get { return eventActionName_; }
            set { eventActionName_ = value; eventActionName_present = true;  }
        }
        
                
          
	private ApplicationReference clientApplication_ ;
	
        private bool  clientApplication_present = false ;
	
        [ASN1Element ( Name = "clientApplication", IsOptional =  true , HasTag =  true, Tag = 3 , HasDefaultValue =  false )  ]
    
        public ApplicationReference ClientApplication
        {
            get { return clientApplication_; }
            set { clientApplication_ = value; clientApplication_present = true;  }
        }
        
                
          
	private bool mmsDeletable_ ;
	[ASN1Boolean( Name = "" )]
    
        [ASN1Element ( Name = "mmsDeletable", IsOptional =  false , HasTag =  true, Tag = 4 , HasDefaultValue =  true )  ]
    
        public bool MmsDeletable
        {
            get { return mmsDeletable_; }
            set { mmsDeletable_ = value;  }
        }
        
                
          
	private EE_Class enrollmentClass_ ;
	
        [ASN1Element ( Name = "enrollmentClass", IsOptional =  false , HasTag =  true, Tag = 5 , HasDefaultValue =  false )  ]
    
        public EE_Class EnrollmentClass
        {
            get { return enrollmentClass_; }
            set { enrollmentClass_ = value;  }
        }
        
                
          
	private EE_Duration duration_ ;
	
        [ASN1Element ( Name = "duration", IsOptional =  false , HasTag =  true, Tag = 6 , HasDefaultValue =  true )  ]
    
        public EE_Duration Duration
        {
            get { return duration_; }
            set { duration_ = value;  }
        }
        
                
          
	private Unsigned32 invokeID_ ;
	
        private bool  invokeID_present = false ;
	
        [ASN1Element ( Name = "invokeID", IsOptional =  true , HasTag =  true, Tag = 7 , HasDefaultValue =  false )  ]
    
        public Unsigned32 InvokeID
        {
            get { return invokeID_; }
            set { invokeID_ = value; invokeID_present = true;  }
        }
        
                
          
	private Unsigned32 remainingAcceptableDelay_ ;
	
        private bool  remainingAcceptableDelay_present = false ;
	
        [ASN1Element ( Name = "remainingAcceptableDelay", IsOptional =  true , HasTag =  true, Tag = 8 , HasDefaultValue =  false )  ]
    
        public Unsigned32 RemainingAcceptableDelay
        {
            get { return remainingAcceptableDelay_; }
            set { remainingAcceptableDelay_ = value; remainingAcceptableDelay_present = true;  }
        }
        
                
          
	private DisplayEnhancementChoiceType displayEnhancement_ ;
	

    [ASN1PreparedElement]    
    [ASN1Choice ( Name = "displayEnhancement" )]
    public class DisplayEnhancementChoiceType : IASN1PreparedElement  {
	            
        
	private string string_ ;
        private bool  string_selected = false ;
        
                
        [ASN1String( Name = "", 
        StringType =  UniversalTags.VisibleString , IsUCS = false )]
        [ASN1Element ( Name = "string", IsOptional =  false , HasTag =  true, Tag = 0 , HasDefaultValue =  false )  ]
    
        public string String
        {
            get { return string_; }
            set { selectString(value); }
        }
        
                
          
        
	private long index_ ;
        private bool  index_selected = false ;
        
                
        [ASN1Integer( Name = "" )]
    
        [ASN1Element ( Name = "index", IsOptional =  false , HasTag =  true, Tag = 1 , HasDefaultValue =  false )  ]
    
        public long Index
        {
            get { return index_; }
            set { selectIndex(value); }
        }
        
                
          
        
	private NullObject noEnhancement_ ;
        private bool  noEnhancement_selected = false ;
        
                
        
        [ASN1Null ( Name = "noEnhancement" )]
    
        [ASN1Element ( Name = "noEnhancement", IsOptional =  false , HasTag =  false  , HasDefaultValue =  false )  ]
    
        public NullObject NoEnhancement
        {
            get { return noEnhancement_; }
            set { selectNoEnhancement(value); }
        }
        
                
          
        public bool isStringSelected () {
            return this.string_selected ;
        }

        


        public void selectString (string val) {
            this.string_ = val;
            this.string_selected = true;
            
            
                    this.index_selected = false;
                
                    this.noEnhancement_selected = false;
                            
        }
        
          
        public bool isIndexSelected () {
            return this.index_selected ;
        }

        


        public void selectIndex (long val) {
            this.index_ = val;
            this.index_selected = true;
            
            
                    this.string_selected = false;
                
                    this.noEnhancement_selected = false;
                            
        }
        
          
        public bool isNoEnhancementSelected () {
            return this.noEnhancement_selected ;
        }

        
        public void selectNoEnhancement () {
            selectNoEnhancement (new NullObject());
	}
	


        public void selectNoEnhancement (NullObject val) {
            this.noEnhancement_ = val;
            this.noEnhancement_selected = true;
            
            
                    this.string_selected = false;
                
                    this.index_selected = false;
                            
        }
        
  

            public void initWithDefaults()
	    {
	    }

            private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(DisplayEnhancementChoiceType));
            public IASN1PreparedElementData PreparedData {
            	get { return preparedData; }
            }

    }
                
        [ASN1Element ( Name = "displayEnhancement", IsOptional =  false , HasTag =  true, Tag = 9 , HasDefaultValue =  false )  ]
    
        public DisplayEnhancementChoiceType DisplayEnhancement
        {
            get { return displayEnhancement_; }
            set { displayEnhancement_ = value;  }
        }
        
                
  
        public bool isEventActionNamePresent () {
            return this.eventActionName_present == true;
        }
        
        public bool isClientApplicationPresent () {
            return this.clientApplication_present == true;
        }
        
        public bool isInvokeIDPresent () {
            return this.invokeID_present == true;
        }
        
        public bool isRemainingAcceptableDelayPresent () {
            return this.remainingAcceptableDelay_present == true;
        }
        

            public void initWithDefaults() {
            	bool param_MmsDeletable =
            false;
        MmsDeletable = param_MmsDeletable;
    EE_Duration param_Duration =         
            null;
        Duration = param_Duration;
    
            }


            private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(EEAttributes));
            public IASN1PreparedElementData PreparedData {
            	get { return preparedData; }
            }

            
    }
            
}
