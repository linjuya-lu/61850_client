
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

using System;
using org.bn.attributes;
using org.bn.attributes.constraints;
using org.bn.coders;
using org.bn.types;
using org.bn;

namespace MMS_ASN1_Model
{


    [ASN1PreparedElement]
    [ASN1Sequence(Name = "Identify_Response", IsSet = false)]
    public class Identify_Response : IASN1PreparedElement
    {

        private MMSString vendorName_;

        [ASN1Element(Name = "vendorName", IsOptional = false, HasTag = true, Tag = 0, HasDefaultValue = false)]
        public MMSString VendorName
        {
            get { return vendorName_; }
            set { vendorName_ = value; }
        }

        private MMSString modelName_;

        [ASN1Element(Name = "modelName", IsOptional = false, HasTag = true, Tag = 1, HasDefaultValue = false)]
        public MMSString ModelName
        {
            get { return modelName_; }
            set { modelName_ = value; }
        }

        private MMSString revision_;

        [ASN1Element(Name = "revision", IsOptional = false, HasTag = true, Tag = 2, HasDefaultValue = false)]
        public MMSString Revision
        {
            get { return revision_; }
            set { revision_ = value; }
        }

        private System.Collections.Generic.ICollection<ObjectIdentifier> listOfAbstractSyntaxes_;

        private bool listOfAbstractSyntaxes_present = false;

        [ASN1ObjectIdentifier(Name = "listOfAbstractSyntaxes")]
        //[ASN1SequenceOf(Name = "listOfAbstractSyntaxes", IsSetOf = false)]
        [ASN1Element(Name = "listOfAbstractSyntaxes", IsOptional = true, HasTag = true, Tag = 3, HasDefaultValue = false)]
        public System.Collections.Generic.ICollection<ObjectIdentifier> ListOfAbstractSyntaxes
        {
            get { return listOfAbstractSyntaxes_; }
            set { listOfAbstractSyntaxes_ = value; listOfAbstractSyntaxes_present = true; }
        }

        public bool isListOfAbstractSyntaxesPresent()
        {
            return this.listOfAbstractSyntaxes_present == true;
        }

        public void initWithDefaults()
        {

        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(Identify_Response));
        public IASN1PreparedElementData PreparedData
        {
            get { return preparedData; }
        }

    }

}
