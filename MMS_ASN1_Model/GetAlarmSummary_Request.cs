
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

using System;
using org.bn.attributes;
using org.bn.attributes.constraints;
using org.bn.coders;
using org.bn.types;
using org.bn;

namespace MMS_ASN1_Model
{


    [ASN1PreparedElement]
    [ASN1Sequence(Name = "GetAlarmSummary_Request", IsSet = false)]
    public class GetAlarmSummary_Request : IASN1PreparedElement
    {

        private bool enrollmentsOnly_;
        [ASN1Boolean(Name = "")]

        [ASN1Element(Name = "enrollmentsOnly", IsOptional = false, HasTag = true, Tag = 0, HasDefaultValue = true)]

        public bool EnrollmentsOnly
        {
            get { return enrollmentsOnly_; }
            set { enrollmentsOnly_ = value; }
        }



        private bool activeAlarmsOnly_;
        [ASN1Boolean(Name = "")]

        [ASN1Element(Name = "activeAlarmsOnly", IsOptional = false, HasTag = true, Tag = 1, HasDefaultValue = true)]

        public bool ActiveAlarmsOnly
        {
            get { return activeAlarmsOnly_; }
            set { activeAlarmsOnly_ = value; }
        }



        private long acknowledgementFilter_;
        [ASN1Integer(Name = "")]

        [ASN1Element(Name = "acknowledgementFilter", IsOptional = false, HasTag = true, Tag = 2, HasDefaultValue = true)]

        public long AcknowledgementFilter
        {
            get { return acknowledgementFilter_; }
            set { acknowledgementFilter_ = value; }
        }



        private SeverityFilterSequenceType severityFilter_;

        [ASN1PreparedElement]
        [ASN1Sequence(Name = "severityFilter", IsSet = false)]
        public class SeverityFilterSequenceType : IASN1PreparedElement
        {

            private Unsigned8 mostSevere_;

            [ASN1Element(Name = "mostSevere", IsOptional = false, HasTag = true, Tag = 0, HasDefaultValue = false)]

            public Unsigned8 MostSevere
            {
                get { return mostSevere_; }
                set { mostSevere_ = value; }
            }



            private Unsigned8 leastSevere_;

            [ASN1Element(Name = "leastSevere", IsOptional = false, HasTag = true, Tag = 1, HasDefaultValue = false)]

            public Unsigned8 LeastSevere
            {
                get { return leastSevere_; }
                set { leastSevere_ = value; }
            }




            public void initWithDefaults()
            {

            }

            private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(SeverityFilterSequenceType));
            public IASN1PreparedElementData PreparedData
            {
                get { return preparedData; }
            }


        }

        [ASN1Element(Name = "severityFilter", IsOptional = false, HasTag = true, Tag = 3, HasDefaultValue = true)]

        public SeverityFilterSequenceType SeverityFilter
        {
            get { return severityFilter_; }
            set { severityFilter_ = value; }
        }



        private ObjectName continueAfter_;

        private bool continueAfter_present = false;

        [ASN1Element(Name = "continueAfter", IsOptional = true, HasTag = true, Tag = 5, HasDefaultValue = false)]

        public ObjectName ContinueAfter
        {
            get { return continueAfter_; }
            set { continueAfter_ = value; continueAfter_present = true; }
        }



        public bool isContinueAfterPresent()
        {
            return this.continueAfter_present == true;
        }


        public void initWithDefaults()
        {
            bool param_EnrollmentsOnly =
        false;
            EnrollmentsOnly = param_EnrollmentsOnly;
            bool param_ActiveAlarmsOnly =
                    false;
            ActiveAlarmsOnly = param_ActiveAlarmsOnly;
            long param_AcknowledgementFilter =
                    0;
            AcknowledgementFilter = param_AcknowledgementFilter;
            SeverityFilterSequenceType param_SeverityFilter =

                        new SeverityFilterSequenceType();
            {

                param_SeverityFilter.MostSevere = new Unsigned8(
                    0)
                ;

                param_SeverityFilter.LeastSevere = new Unsigned8(
                    127)
                ;

            }
            ;
            SeverityFilter = param_SeverityFilter;

        }


        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(GetAlarmSummary_Request));
        public IASN1PreparedElementData PreparedData
        {
            get { return preparedData; }
        }


    }

}
