
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

using System;
using org.bn.attributes;
using org.bn.attributes.constraints;
using org.bn.coders;
using org.bn.types;
using org.bn;

namespace MMS_ASN1_Model
{


    [ASN1PreparedElement]
    [ASN1Sequence(Name = "Semaphore_instance", IsSet = false)]
    public class Semaphore_instance : IASN1PreparedElement
    {

        private Identifier name_;

        [ASN1Element(Name = "name", IsOptional = false, HasTag = true, Tag = 0, HasDefaultValue = false)]

        public Identifier Name
        {
            get { return name_; }
            set { name_ = value; }
        }



        private DefinitionChoiceType definition_;


        [ASN1PreparedElement]
        [ASN1Choice(Name = "definition")]
        public class DefinitionChoiceType : IASN1PreparedElement
        {


            private ObjectIdentifier reference_;
            private bool reference_selected = false;


            [ASN1ObjectIdentifier(Name = "")]

            [ASN1Element(Name = "reference", IsOptional = false, HasTag = true, Tag = 1, HasDefaultValue = false)]

            public ObjectIdentifier Reference
            {
                get { return reference_; }
                set { selectReference(value); }
            }




            private DetailsSequenceType details_;
            private bool details_selected = false;



            [ASN1PreparedElement]
            [ASN1Sequence(Name = "details", IsSet = false)]
            public class DetailsSequenceType : IASN1PreparedElement
            {

                private Access_Control_List_instance accessControl_;

                [ASN1Element(Name = "accessControl", IsOptional = false, HasTag = true, Tag = 3, HasDefaultValue = false)]

                public Access_Control_List_instance AccessControl
                {
                    get { return accessControl_; }
                    set { accessControl_ = value; }
                }



                private ClassEnumType class__;



                [ASN1PreparedElement]
                [ASN1Enum(Name = "ClassEnumType")]
                public class ClassEnumType : IASN1PreparedElement
                {
                    public enum EnumType
                    {

                        [ASN1EnumItem(Name = "token", HasTag = true, Tag = 0)]
                        token,
                        [ASN1EnumItem(Name = "pool", HasTag = true, Tag = 1)]
                        pool,
                    }

                    private EnumType val;

                    public EnumType Value
                    {
                        get { return val; }
                        set { val = value; }
                    }

                    public void initWithDefaults()
                    {
                    }


                    private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(ClassEnumType));
                    public IASN1PreparedElementData PreparedData
                    {
                        get { return preparedData; }
                    }


                }


                [ASN1Element(Name = "class", IsOptional = false, HasTag = true, Tag = 4, HasDefaultValue = false)]

                public ClassEnumType Class_
                {
                    get { return class__; }
                    set { class__ = value; }
                }



                private long numberOfTokens_;

                private bool numberOfTokens_present = false;
                [ASN1Integer(Name = "")]

                [ASN1Element(Name = "numberOfTokens", IsOptional = true, HasTag = true, Tag = 5, HasDefaultValue = false)]

                public long NumberOfTokens
                {
                    get { return numberOfTokens_; }
                    set { numberOfTokens_ = value; numberOfTokens_present = true; }
                }



                private System.Collections.Generic.ICollection<string> namedTokens_;

                private bool namedTokens_present = false;
                [ASN1String(Name = "",
                    StringType = UniversalTags.VisibleString, IsUCS = false)]
                [ASN1SequenceOf(Name = "namedTokens", IsSetOf = false)]


                [ASN1Element(Name = "namedTokens", IsOptional = true, HasTag = true, Tag = 6, HasDefaultValue = false)]

                public System.Collections.Generic.ICollection<string> NamedTokens
                {
                    get { return namedTokens_; }
                    set { namedTokens_ = value; namedTokens_present = true; }
                }



                private Event_Condition_instance eventCondition_;

                [ASN1Element(Name = "eventCondition", IsOptional = false, HasTag = true, Tag = 7, HasDefaultValue = false)]

                public Event_Condition_instance EventCondition
                {
                    get { return eventCondition_; }
                    set { eventCondition_ = value; }
                }



                public bool isNumberOfTokensPresent()
                {
                    return this.numberOfTokens_present == true;
                }

                public bool isNamedTokensPresent()
                {
                    return this.namedTokens_present == true;
                }


                public void initWithDefaults()
                {

                }

                private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(DetailsSequenceType));
                public IASN1PreparedElementData PreparedData
                {
                    get { return preparedData; }
                }


            }

            [ASN1Element(Name = "details", IsOptional = false, HasTag = true, Tag = 2, HasDefaultValue = false)]

            public DetailsSequenceType Details
            {
                get { return details_; }
                set { selectDetails(value); }
            }



            public bool isReferenceSelected()
            {
                return this.reference_selected;
            }




            public void selectReference(ObjectIdentifier val)
            {
                this.reference_ = val;
                this.reference_selected = true;


                this.details_selected = false;

            }


            public bool isDetailsSelected()
            {
                return this.details_selected;
            }




            public void selectDetails(DetailsSequenceType val)
            {
                this.details_ = val;
                this.details_selected = true;


                this.reference_selected = false;

            }



            public void initWithDefaults()
            {
            }

            private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(DefinitionChoiceType));
            public IASN1PreparedElementData PreparedData
            {
                get { return preparedData; }
            }

        }

        [ASN1Element(Name = "definition", IsOptional = false, HasTag = false, HasDefaultValue = false)]

        public DefinitionChoiceType Definition
        {
            get { return definition_; }
            set { definition_ = value; }
        }




        public void initWithDefaults()
        {

        }


        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(Semaphore_instance));
        public IASN1PreparedElementData PreparedData
        {
            get { return preparedData; }
        }


    }

}
