
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

using System;
using org.bn.attributes;
using org.bn.attributes.constraints;
using org.bn.coders;
using org.bn.types;
using org.bn;

namespace MMS_ASN1_Model {


    [ASN1PreparedElement]
    [ASN1Sequence ( Name = "EntryContent", IsSet = false  )]
    public class EntryContent : IASN1PreparedElement {
                    
	private TimeOfDay occurrenceTime_ ;
	
        [ASN1Element ( Name = "occurrenceTime", IsOptional =  false , HasTag =  true, Tag = 0 , HasDefaultValue =  false )  ]
    
        public TimeOfDay OccurrenceTime
        {
            get { return occurrenceTime_; }
            set { occurrenceTime_ = value;  }
        }
        
                
          
	private EntryFormChoiceType entryForm_ ;
	

    [ASN1PreparedElement]    
    [ASN1Choice ( Name = "entryForm" )]
    public class EntryFormChoiceType : IASN1PreparedElement  {
	            
        
	private DataSequenceType data_ ;
        private bool  data_selected = false ;
        
                
        
       [ASN1PreparedElement]
       [ASN1Sequence ( Name = "data", IsSet = false  )]
       public class DataSequenceType : IASN1PreparedElement {
                        
	private EventSequenceType event_ ;
	
        private bool  event_present = false ;
	
       [ASN1PreparedElement]
       [ASN1Sequence ( Name = "event", IsSet = false  )]
       public class EventSequenceType : IASN1PreparedElement {
                        
	private ObjectName eventConditionName_ ;
	
        [ASN1Element ( Name = "eventConditionName", IsOptional =  false , HasTag =  true, Tag = 0 , HasDefaultValue =  false )  ]
    
        public ObjectName EventConditionName
        {
            get { return eventConditionName_; }
            set { eventConditionName_ = value;  }
        }
        
                
          
	private EC_State currentState_ ;
	
        [ASN1Element ( Name = "currentState", IsOptional =  false , HasTag =  true, Tag = 1 , HasDefaultValue =  false )  ]
    
        public EC_State CurrentState
        {
            get { return currentState_; }
            set { currentState_ = value;  }
        }
        
                
  
                
                public void initWithDefaults() {
            		
                }

            private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(EventSequenceType));
            public IASN1PreparedElementData PreparedData {
            	get { return preparedData; }
            }

                
       }
                
        [ASN1Element ( Name = "event", IsOptional =  true , HasTag =  true, Tag = 0 , HasDefaultValue =  false )  ]
    
        public EventSequenceType Event
        {
            get { return event_; }
            set { event_ = value; event_present = true;  }
        }
        
                
          
	private System.Collections.Generic.ICollection<Journal_Variable> listOfVariables_ ;
	
        private bool  listOfVariables_present = false ;
	
[ASN1SequenceOf( Name = "listOfVariables", IsSetOf = false  )]

    
        [ASN1Element ( Name = "listOfVariables", IsOptional =  true , HasTag =  true, Tag = 1 , HasDefaultValue =  false )  ]
    
        public System.Collections.Generic.ICollection<Journal_Variable> ListOfVariables
        {
            get { return listOfVariables_; }
            set { listOfVariables_ = value; listOfVariables_present = true;  }
        }
        
                
  
        public bool isEventPresent () {
            return this.event_present == true;
        }
        
        public bool isListOfVariablesPresent () {
            return this.listOfVariables_present == true;
        }
        
                
                public void initWithDefaults() {
            		
                }

            private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(DataSequenceType));
            public IASN1PreparedElementData PreparedData {
            	get { return preparedData; }
            }

                
       }
                
        [ASN1Element ( Name = "data", IsOptional =  false , HasTag =  true, Tag = 2 , HasDefaultValue =  false )  ]
    
        public DataSequenceType Data
        {
            get { return data_; }
            set { selectData(value); }
        }
        
                
          
        
	private MMSString annotation_ ;
        private bool  annotation_selected = false ;
        
                
        
        [ASN1Element ( Name = "annotation", IsOptional =  false , HasTag =  true, Tag = 3 , HasDefaultValue =  false )  ]
    
        public MMSString Annotation
        {
            get { return annotation_; }
            set { selectAnnotation(value); }
        }
        
                
          
        public bool isDataSelected () {
            return this.data_selected ;
        }

        


        public void selectData (DataSequenceType val) {
            this.data_ = val;
            this.data_selected = true;
            
            
                    this.annotation_selected = false;
                            
        }
        
          
        public bool isAnnotationSelected () {
            return this.annotation_selected ;
        }

        


        public void selectAnnotation (MMSString val) {
            this.annotation_ = val;
            this.annotation_selected = true;
            
            
                    this.data_selected = false;
                            
        }
        
  

            public void initWithDefaults()
	    {
	    }

            private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(EntryFormChoiceType));
            public IASN1PreparedElementData PreparedData {
            	get { return preparedData; }
            }

    }
                
        [ASN1Element ( Name = "entryForm", IsOptional =  false , HasTag =  false  , HasDefaultValue =  false )  ]
    
        public EntryFormChoiceType EntryForm
        {
            get { return entryForm_; }
            set { entryForm_ = value;  }
        }
        
                
  

            public void initWithDefaults() {
            	
            }


            private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(EntryContent));
            public IASN1PreparedElementData PreparedData {
            	get { return preparedData; }
            }

            
    }
            
}
