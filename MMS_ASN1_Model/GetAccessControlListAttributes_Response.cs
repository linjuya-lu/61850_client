
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

using System;
using org.bn.attributes;
using org.bn.attributes.constraints;
using org.bn.coders;
using org.bn.types;
using org.bn;

namespace MMS_ASN1_Model {


    [ASN1PreparedElement]
    [ASN1Sequence ( Name = "GetAccessControlListAttributes_Response", IsSet = false  )]
    public class GetAccessControlListAttributes_Response : IASN1PreparedElement {
                    
	private Identifier name_ ;
	
        [ASN1Element ( Name = "name", IsOptional =  false , HasTag =  true, Tag = 0 , HasDefaultValue =  false )  ]
    
        public Identifier Name
        {
            get { return name_; }
            set { name_ = value;  }
        }
        
                
          
	private AccessControlListElementsSequenceType accessControlListElements_ ;
	
       [ASN1PreparedElement]
       [ASN1Sequence ( Name = "accessControlListElements", IsSet = false  )]
       public class AccessControlListElementsSequenceType : IASN1PreparedElement {
                        
	private AccessCondition readAccessCondition_ ;
	
        private bool  readAccessCondition_present = false ;
	
        [ASN1Element ( Name = "readAccessCondition", IsOptional =  true , HasTag =  true, Tag = 0 , HasDefaultValue =  false )  ]
    
        public AccessCondition ReadAccessCondition
        {
            get { return readAccessCondition_; }
            set { readAccessCondition_ = value; readAccessCondition_present = true;  }
        }
        
                
          
	private AccessCondition storeAccessCondition_ ;
	
        private bool  storeAccessCondition_present = false ;
	
        [ASN1Element ( Name = "storeAccessCondition", IsOptional =  true , HasTag =  true, Tag = 1 , HasDefaultValue =  false )  ]
    
        public AccessCondition StoreAccessCondition
        {
            get { return storeAccessCondition_; }
            set { storeAccessCondition_ = value; storeAccessCondition_present = true;  }
        }
        
                
          
	private AccessCondition writeAccessCondition_ ;
	
        private bool  writeAccessCondition_present = false ;
	
        [ASN1Element ( Name = "writeAccessCondition", IsOptional =  true , HasTag =  true, Tag = 2 , HasDefaultValue =  false )  ]
    
        public AccessCondition WriteAccessCondition
        {
            get { return writeAccessCondition_; }
            set { writeAccessCondition_ = value; writeAccessCondition_present = true;  }
        }
        
                
          
	private AccessCondition loadAccessCondition_ ;
	
        private bool  loadAccessCondition_present = false ;
	
        [ASN1Element ( Name = "loadAccessCondition", IsOptional =  true , HasTag =  true, Tag = 3 , HasDefaultValue =  false )  ]
    
        public AccessCondition LoadAccessCondition
        {
            get { return loadAccessCondition_; }
            set { loadAccessCondition_ = value; loadAccessCondition_present = true;  }
        }
        
                
          
	private AccessCondition executeAccessCondition_ ;
	
        private bool  executeAccessCondition_present = false ;
	
        [ASN1Element ( Name = "executeAccessCondition", IsOptional =  true , HasTag =  true, Tag = 4 , HasDefaultValue =  false )  ]
    
        public AccessCondition ExecuteAccessCondition
        {
            get { return executeAccessCondition_; }
            set { executeAccessCondition_ = value; executeAccessCondition_present = true;  }
        }
        
                
          
	private AccessCondition deleteAccessCondition_ ;
	
        private bool  deleteAccessCondition_present = false ;
	
        [ASN1Element ( Name = "deleteAccessCondition", IsOptional =  true , HasTag =  true, Tag = 5 , HasDefaultValue =  false )  ]
    
        public AccessCondition DeleteAccessCondition
        {
            get { return deleteAccessCondition_; }
            set { deleteAccessCondition_ = value; deleteAccessCondition_present = true;  }
        }
        
                
          
	private AccessCondition editAccessCondition_ ;
	
        private bool  editAccessCondition_present = false ;
	
        [ASN1Element ( Name = "editAccessCondition", IsOptional =  true , HasTag =  true, Tag = 6 , HasDefaultValue =  false )  ]
    
        public AccessCondition EditAccessCondition
        {
            get { return editAccessCondition_; }
            set { editAccessCondition_ = value; editAccessCondition_present = true;  }
        }
        
                
  
        public bool isReadAccessConditionPresent () {
            return this.readAccessCondition_present == true;
        }
        
        public bool isStoreAccessConditionPresent () {
            return this.storeAccessCondition_present == true;
        }
        
        public bool isWriteAccessConditionPresent () {
            return this.writeAccessCondition_present == true;
        }
        
        public bool isLoadAccessConditionPresent () {
            return this.loadAccessCondition_present == true;
        }
        
        public bool isExecuteAccessConditionPresent () {
            return this.executeAccessCondition_present == true;
        }
        
        public bool isDeleteAccessConditionPresent () {
            return this.deleteAccessCondition_present == true;
        }
        
        public bool isEditAccessConditionPresent () {
            return this.editAccessCondition_present == true;
        }
        
                
                public void initWithDefaults() {
            		
                }

            private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(AccessControlListElementsSequenceType));
            public IASN1PreparedElementData PreparedData {
            	get { return preparedData; }
            }

                
       }
                
        [ASN1Element ( Name = "accessControlListElements", IsOptional =  false , HasTag =  true, Tag = 1 , HasDefaultValue =  false )  ]
    
        public AccessControlListElementsSequenceType AccessControlListElements
        {
            get { return accessControlListElements_; }
            set { accessControlListElements_ = value;  }
        }
        
                
          
	private bool vMDuse_ ;
	[ASN1Boolean( Name = "" )]
    
        [ASN1Element ( Name = "vMDuse", IsOptional =  false , HasTag =  true, Tag = 2 , HasDefaultValue =  false )  ]
    
        public bool VMDuse
        {
            get { return vMDuse_; }
            set { vMDuse_ = value;  }
        }
        
                
          
	private System.Collections.Generic.ICollection<ReferencesSequenceType> references_ ;
	
       [ASN1PreparedElement]
       [ASN1Sequence ( Name = "references", IsSet = false  )]
       public class ReferencesSequenceType : IASN1PreparedElement {
                        
	private ObjectClass objectClass_ ;
	
        [ASN1Element ( Name = "objectClass", IsOptional =  false , HasTag =  true, Tag = 0 , HasDefaultValue =  false )  ]
    
        public ObjectClass ObjectClass
        {
            get { return objectClass_; }
            set { objectClass_ = value;  }
        }
        
                
          
	private long objectCount_ ;
	[ASN1Integer( Name = "" )]
    
        [ASN1Element ( Name = "objectCount", IsOptional =  false , HasTag =  true, Tag = 1 , HasDefaultValue =  false )  ]
    
        public long ObjectCount
        {
            get { return objectCount_; }
            set { objectCount_ = value;  }
        }
        
                
  
                
                public void initWithDefaults() {
            		
                }

            private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(ReferencesSequenceType));
            public IASN1PreparedElementData PreparedData {
            	get { return preparedData; }
            }

                
       }
                
[ASN1SequenceOf( Name = "references", IsSetOf = false  )]

    
        [ASN1Element ( Name = "references", IsOptional =  false , HasTag =  true, Tag = 3 , HasDefaultValue =  false )  ]
    
        public System.Collections.Generic.ICollection<ReferencesSequenceType> References
        {
            get { return references_; }
            set { references_ = value;  }
        }
        
                
          
	private Identifier accessControlList_ ;
	
        private bool  accessControlList_present = false ;
	
        [ASN1Element ( Name = "accessControlList", IsOptional =  true , HasTag =  true, Tag = 4 , HasDefaultValue =  false )  ]
    
        public Identifier AccessControlList
        {
            get { return accessControlList_; }
            set { accessControlList_ = value; accessControlList_present = true;  }
        }
        
                
  
        public bool isAccessControlListPresent () {
            return this.accessControlList_present == true;
        }
        

            public void initWithDefaults() {
            	
            }


            private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(GetAccessControlListAttributes_Response));
            public IASN1PreparedElementData PreparedData {
            	get { return preparedData; }
            }

            
    }
            
}
